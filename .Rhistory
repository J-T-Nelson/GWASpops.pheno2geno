transform_fst_save(asso, numChunks = 10, startChunk = 131, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 10, startChunk = 141, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 10, startChunk = 151, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 10, startChunk = 161, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 10, startChunk = 171, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 10, startChunk = 181, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 10, startChunk = 191, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 10, startChunk = 201, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 10, startChunk = 211, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 10, startChunk = 221, thousGenPops, return_DS = FALSE, saveData = TRUE)
transform_fst_save(asso, numChunks = 3, startChunk = 231, thousGenPops, return_DS = FALSE, saveData = TRUE)
3000000000/2000000
2000000/3000000000
4000000/3000000000
View(HudsonFst)
pop1 <- .56
pop2 <- .84
pop3 <- .25
pop4 <- .01
n1 <- 534
n2 <- 233
n3 <- 28
n4 <- 4000
testPops <- c(pop1, pop2, pop3, pop4)
testSampleSizes <- c(n1, n2,n3,n4)
popPairs <- combn(testPops, 2)
popPairs
ssPairs <- combn(testSampleSizes,2)
ssPairs
choose(4,2)
class(popPairs)
popPairs_rev <- popPairs[c(2,1), ]
popPairs_rev
ssPairs_rev <- ssPairs[c(2,1), ]
for(i in 1:ncol(popPairs)){
HudsonFst(ssPairs[1, i], ssPairs[2, i], popPairs[1, i], popPairs[1, i],)
}
for(i in 1:ncol(popPairs)){
HudsonFst(ssPairs[1, i], ssPairs[2, i], popPairs[1, i], popPairs[1, i])
}
g
capture <- for(i in 1:ncol(popPairs)){
HudsonFst(ssPairs[1, i], ssPairs[2, i], popPairs[1, i], popPairs[1, i])
}
ssPairs[1, 1]
results <- lapply(1:ncol(popPairs), function(i) {
HudsonFst(ssPairs[1, i], ssPairs[2, i], popPairs[1, i], popPairs[1, i])
})
View(results)
comparisonNames <- c('pop1_pop2', 'pop1_pop3', 'pop1_pop4', 'pop2_pop3', 'pop2_pop4', 'pop3_pop4')
comparisonNames_rev <- c('pop2_pop1', 'pop3_pop1', 'pop4_pop1', 'pop3_pop2', 'pop4_pop2', 'pop4_pop3')
results_rev <- lapply(1:ncol(popPairs), function(i) {
HudsonFst(ssPairs_rev[1, i], ssPairs_rev[2, i], popPairs_rev[1, i], popPairs_rev[1, i])
})
names(results) <- comparisonNames
names(results_rev) <- comparisonNames_rev
View(results)
View(results_rev)
results
results_rev
pz <- Populations
View(pz)
View(HudsonFst)
HudsonFst(n2,n4, p2, p4)
HudsonFst(n2,n4, pop2, pop4)
captureList <- list()
for(pair in comparisonNames){
captureList[[pair]] <- HudsonFst(ssPairs[1, i], ssPairs[2, i], popPairs[1, i], popPairs[1, i])
}
View(captureList)
for(i in 1:length(comparisonNames)){
captureList[[ comparisonNames[i] ]] <- HudsonFst(ssPairs[1, i], ssPairs[2, i], popPairs[1, i], popPairs[1, i])
}
View(captureList)
HudsonFst(ssPairs[1, 5], ssPairs[2, 5], popPairs[1, 5], popPairs[1, 5])
ssPairs[1, 5]
HudsonFst(n2,n4, pop2, pop4)
n2
ssPairs[2, 5]
n4
popPairs[1, 5]
p2
pop2
popPairs[1, 5]
pop4
for(i in 1:length(comparisonNames)){
captureList[[ comparisonNames[i] ]] <- HudsonFst(ssPairs[1, i], ssPairs[2, i], popPairs[1, i], popPairs[2, i])
}
View(captureList)
# didn't know I could use lapply this way... thanks chatGPT
results <- lapply(1:ncol(popPairs), function(i) {
HudsonFst(ssPairs[1, i], ssPairs[2, i], popPairs[1, i], popPairs[2, i])
})
results_rev <- lapply(1:ncol(popPairs), function(i) {
HudsonFst(ssPairs_rev[1, i], ssPairs_rev[2, i], popPairs_rev[1, i], popPairs_rev[2, i])
})
results
names(results) <- comparisonNames
names(results_rev) <- comparisonNames_rev
results
results_rev
rm(captureList)
View(WrightFst)
setwd("D:/Programming/R_projects/Kulathinal_Lab/GWASpops.pheno2geno/")
library(GWASpops.pheno2geno)
source("bootCalls2.R")
source("./R/fst_funcs.R")
source("./workingScripts/dataTransform_Fst.R")
load("./WorkingData/GwasAssocitions.rda")
thousGenPops <- Populations[grep("1000GENOMES", Populations$Population_Abbreviation)]
View(load_n_flatten)
View(load_n_flatten)
variantList <- load('./workingData/unprocessedChunks/chunk23301-23430.rds')
variantList <- purrr::flatten(purrr::flatten(retList))
View(variantList)
variantList <- purrr::flatten(retList)
View(variantList)
# compose list then tranform into GWASpops.geno2pheno masterList format
dataList <- list(asso, variantList)
masterList <- ensListTransform_mod(dataList, TRUE)
# calculate Fst, delete redudant data vals, and discard multiallelic sites
fstList <- hudsonFst_alleleList(masterList[[2]], Fst_populations, deleteRedundants = TRUE, discardMultiAllelic =  TRUE)
# calculate Fst, delete redudant data vals, and discard multiallelic sites
fstList <- hudsonFst_alleleList(masterList[[2]], thousGenPops, deleteRedundants = TRUE, discardMultiAllelic =  TRUE)
warnings()
View(fstList)
fstList <- fill_rows(fstList) # making all sublists compatible for binding together as data.frame
View(retList)
View(fstList)
names <- names(fstList)
fstDF <- cbind.data.frame(fstList)
colnames(fstDF) <- names
fstDF <- as.data.frame(t(fstDF)) # transpose s.t. rows are alleles, cols are population-pairs
masterList[['Fst_per_allele']] <- fstDF
setwd("D:\\Programming\\R_projects\\Kulathinal_Lab\\GWASpops.pheno2geno\\workingData\\fst_GWAS_annotation_lists")
fileName <- paste0('fullData_', '234')
save(masterList, file = fileName)
setwd("D:\\Programming\\R_projects\\Kulathinal_Lab\\GWASpops.pheno2geno")
getwd()
library(GWASpops.pheno2geno)
source("bootCalls2.R")
source("./R/fst_funcs.R")
source("./workingScripts/dataTransform_Fst.R")
load("./WorkingData/GwasAssocitions.rda")
thousGenPops <- Populations[grep("1000GENOMES", Populations$Population_Abbreviation)]
fileList <- list.files('./workingData/fst_GWAS_annotation_lists/')
setwd("./workingData/fst_GWAS_annotation_lists/")
load(fileList[1])
allFst <- lapply(fileList, function(i){
load(i)
return(masterList[[4]])
})
View(allFst)
?flatten
allFst_df <- purrr::flatten(allFst)
View(allFst_df)
View(allFst)
allFst_df[["1000GENOMES:phase_3:ACB-X-1000GENOMES:phase_3:AFR"]]
str(allFst_df[[1]])
str(allFst_df[1])
str(allFst[1])
colnames((allFst[1]))
rownames((allFst[1]))
View(masterList)
fstDF_test <- masterList[[4]]
class(fstDF_test)
View(fstDF_test)
rowNames(fstDF_test[1:10])
rownames(fstDF_test)[1:10]
View(allFst)
fstDF2_test <- allFst[1]
class(fstDF2_test)
fstDF2_test <- allFst[[1]]
class(fstDF2_test) # list
View(fstDF2_test)
View(allFst_df)
master_fst <- data.frame()
for(i in 1:length(allFst)){
master_fst <- rbind.data.frame(master_fst, allFst[[i]])
}
View(master_fst)
View(master_fst)
na_count <- sum(is.na(master_fst))
na_count
total_fst_slots <- 159559*496
na_count/total_fst_slots
master_fst[master_fst < 0 ] <- 0
View(master_fst)
# Converted all neg values to 0. Now we need to store the new object in a new folder.. and consider what steps are next for the analysis we wish to do
full_fst <- master_fst
getwd()
setwd("..")
getwd()
setwd("./full_data_for_analysis/")
save(full_fst, file = "full_fst.rds")
View(masterList)
View(gwasData)
rm(allFst, allFst_df, fstDF_test, fstDF2_test, full_fst, gwasData, masterList, pops)
full_popAlleleFreq_perAllele <- lapply(fileList, function(i){
load(i)
return(masterList[[2]])
})
setwd("..")
setwd("..")
getwd()
setwd("./workingData/fst_GWAS_annotation_lists/")
full_popAlleleFreq_perAllele <- lapply(fileList, function(i){
load(i)
return(masterList[[2]])
})
View(full_popAlleleFreq_perAllele)
fTest <- purrr::flatten(full_popAlleleFreq_perAllele)
View(fTest)
###########################################
full_popAlleleFreq_perAllele <- fTest
setwd("..")
setwd("./full_data_for_analysis/")
save(full_fst, file = "full_popAlleleFreq_PerAllele.rds")
save(full_popAlleleFreq_perAllele, file = "full_popAlleleFreq_PerAllele.rds")
rm(fTest)
a <- i
.Internal(inspect(i))
.Internal(inspect(a))
inspect(i)
full_popAlleleFreq_perPopulation <- lapply(fileList, function(i){
load(i)
return(masterList[[3]])
})
getwd()
setwd("..")
setwd("..")
setwd("./workingData/fst_GWAS_annotation_lists/")
full_popAlleleFreq_perPopulation <- lapply(fileList, function(i){
load(i)
return(masterList[[3]])
})
full_popAlleleFreq_perPopulation <- purrr::flatten(full_popAlleleFreq_perPopulation)
View(full_popAlleleFreq_perPopulation)
73*73
perPopNames <- names(full_popAlleleFreq_perPopulation)
uni_perPopNames <- unique(perPopNames)
1679/73
perPopNames %in% uni_perPopNames[1]
full_perPopulation_popAlleleFreq <- lapply(uni_perPopNames, function(x){
tempList <- full_popAlleleFreq_perPopulation[perPopNames %in% x] # filtering down to only single population
fullSquash <- rbind.data.frame(tempList)
return(fullSquash)
})
tempList <- as.data.frame(full_popAlleleFreq_perPopulation[perPopNames %in% x]) # filtering down to only single population
full_perPopulation_popAlleleFreq <- lapply(uni_perPopNames, function(x){
tempList <- as.data.frame(full_popAlleleFreq_perPopulation[perPopNames %in% x]) # filtering down to only single population
fullSquash <- rbind.data.frame(tempList)
return(fullSquash)
})
testFilter <- full_popAllelFreq_perPopulation[ perPopNames %in% uni_perPopNames[1] ]
testFilter <- full_popAlleleFreq_perPopulation[ perPopNames %in% uni_perPopNames[1] ]
View(testFilter)
full_perPopulation_popAlleleFreq <- lapply(uni_perPopNames, function(x){
print(x)
tempList <- as.data.frame(full_popAlleleFreq_perPopulation[perPopNames %in% x]) # filtering down to only single population
fullSquash <- rbind.data.frame(tempList)
return(fullSquash)
})
test_rbind <- rbund.data.frame(testFileter)
test_rbind <- rbund.data.frame(testFilter)
test_rbind <- rbind.data.frame(testFilter)
test_rbind <- cbind.data.frame(testFilter) # same error...
test_rbind <- dplyr::bind_rows(testFilter)
View(test_rbind)
full_perPopulation_popAlleleFreq <- lapply(uni_perPopNames, function(x){
print(x)
tempList <- full_popAlleleFreq_perPopulation[perPopNames %in% x] # filtering down to only single population
fullSquash <- dplyr::bind_rows(tempList)
return(fullSquash)
})
View(full_perPopulation_popAlleleFreq)
names(full_perPopulation_popAlleleFreq) <- uni_perPopNames
View(full_perPopulation_popAlleleFreq)
View(full_perPopulation_popAlleleFreq)
getwd()
setwd("..")
setwd("./full_data_for_analysis/")
# saving
save(full_perPopulation_popAlleleFreq, file = "full_perPopulation_popAlleleFreq.rds")
rm(full_popAlleleFreq_perPopulation)
rm(test_rbind, testFilter)
full_SNP_Annotations_GWASc_Ensembl <- lapply(fileList, function(i){
load(i)
return(masterList[[1]])
})
setwd("..")
setwd("./full_data_for_analysis/")
setwd("..")
setwd("..")
setwd("./workingData/fst_GWAS_annotation_lists/")
full_SNP_Annotations_GWASc_Ensembl <- lapply(fileList, function(i){
load(i)
return(masterList[[1]])
})
test <- dplyr::bind_rows(full_SNP_Annotations_GWASc_Ensembl)
View(test)
full_SNP_Annotations_GWASc_Ensembl <- test
getwd()
setwd("..")
setwd("./full_data_for_analysis/")
#saving final DS
save(full_SNP_Annotations_GWASc_Ensembl, file = "full_SNP_Annotations_GWASc_Ensembl.rds")
full_fst <- master_fst
full_masterList <- list(full_SNP_Annotations_GWASc_Ensembl, full_popAlleleFreq_perAllele, full_perPopulation_popAlleleFreq, full_fst)
save(full_masterList, file = "full_masterList.rds")
rm(full_masterList)
return(sum(master_fst[i, ]))
all_popPairs_sum <- sapply(1:nrow(master_fst), function(i){
return(sum(master_fst[i, ]))
})
all_popPairs_sum <- sapply(1:10, function(i){
return(sum(master_fst[i, ]))
})
thousGenPops$Population_Abbreviation
popNames <- thousGenPops$Population_Abbreviation
full_fst_perPop <- lapply(popNames, function(x) {
popFsts <- master_fst[, colnames(master_fst) %in% x]
})
View(full_fst_perPop)
colnames(master_fst) %in% popNames[1]
grep(popNames[1], colnames(master_fst))
full_fst_perPop <- lapply(popNames, function(x) {
popFsts <- master_fst[, grep(x, colnames(master_fst))]
})
View(full_fst_perPop)
names(full_fst_perPop) <- popNames
getwd()
save(full_fst_perPop, file = 'full_fst_perPop.rds')
all_popPairs_sum <- sapply(1:nrow(master_fst), function(i){
return(sum(master_fst[i, ]))
}) # this call is taking a long time to run... so going to have to run it later.
all_popPairs_sum <- sapply(1:nrow(master_fst), function(i){
return(sum(master_fst[i, ]), na.rm = TRUE)
}) # this call is taking a long time to run... so going to have to run it later.
all_popPairs_sum <- sapply(1:nrow(master_fst), function(i){
return(sum(master_fst[i, ], na.rm = TRUE))
}) # this call is taking a long time to run... so going to have to run it later.
plot(all_popPairs_sum)
boxplot(all_popPairs_sum)
density(all_popPairs_sum, main = "Density of population pair Fst values")
dens <- density(all_popPairs_sum)
plot(dens, main = "Density of population pair Fst values")
View(master_fst)
summary(all_popPairs_sum)
View(full_fst_perPop)
naVals <- is.na(master_fst)
rows_with_na <- apply(master_fst, 1, function(row) any(is.na(row)))
rows_with_na[1:10]
onlyPosRows <- rows_with_na[rows_with_na == TRUE]
57575/159559
onlyPosRows[1:20]
?any
alleles_to_check <- names(onlyPosRows)[1:10]
check_alleles <- full_popAlleleFreq_perAllele[alleles_to_check]
View(check_alleles)
View(check_alleles[["rs35472707"]])
num_missing_pops <- sapply(check_alleles, function(x) {
thousGenPops$Population_Abbreviation %in% x$population
})
View(num_missing_pops)
View(check_alleles[["rs78444298"]])
num_na_perRow <- apply(naVals, 1, sum)
num_na_perRow[1:100]
summary(num_na_perRow)
bad_rows = num_na_perRow >247
sum(bad_rows)
28518/159559
bad_rows[1:100]
good_fst_rows <- master_fst[bad_rows, ]
good_fst_rows <- master_fst[!bad_rows, ]
num_na_perRow_goodRows <- num_na_perRow[!bad_rows]
all_popPairsSum_normalized <- sapply(1:nrow(num_na_perRow_goodRows), function(i){
return(sum(good_fst_rows[i, ], na.rm = TRUE))
})
all_popPairsSum_normalized <- sapply(1:nrow(good_fst_rows), function(i){
return(sum(good_fst_rows[i, ], na.rm = TRUE))
})
# naming 'fixed' because its a sort of inverse normalization.. and not a standard type of normalization
denom = (all_popPairsSum_normalized - num_na_perRow_goodRows)
all_popPairsSum_fixed <- all_popPairsSum_normalized/denom
summary(denom)
summary(num_na_perRow_goodRows)
fixing_factor = 496/(496 - num_na_perRow_goodRows)
# think I just did the calculation wrong outright
summary(fixing_factor)
all_popPairsSum_fixed <- all_popPairsSum_normalized*fixing_factor
summary(all_popPairsSum_fixed)
# the before fixing results:
summary(all_popPairs_sum)
dens <- density(all_popPairs_sum)
plot(dens, main = "Density of pop-pair Fst - Fixed")
dens <- density(all_popPairsSum_fixed)
plot(dens, main = "Density of pop-pair Fst - Fixed") #
plot(all_popPairsSum_fixed)
q1 <- quantile(all_popPairsSum_fixed, 0.01)
q5 <- quantile(all_popPairsSum_fixed, 0.05)
q10 <- quantile(all_popPairsSum_fixed, 0.1)
q1
q10
q99 <- quantile(all_popPairsSum_fixed, 0.99)
q99
q95 <- quantile(all_popPairsSum_fixed, 0.95)
q90 <- quantile(all_popPairsSum_fixed, 0.90)
q90
q95
?abline
abline(h = q99, col = 'green')
abline(h = q95, col = 'blue')
abline(h = q90, col = 'red')
abline(h = q99, col = 'green', lwd = 2)
abline(h = q95, col = 'blue', lwd = 2)
abline(h = q90, col = 'red', lwd = 2)
plot(all_popPairsSum_fixed, main = "Density of pop-pair Fst Sums - Fixed", xlab = "Sum of Variant Fst", ylab = "Index of Sample")
plot(all_popPairsSum_fixed, main = "Density of pop-pair Fst Sums - Fixed", ylab = "Sum of Variant Fst", xlab = "Index of Sample", pch = 20)
abline(h = q99, col = 'green', lwd = 2)
abline(h = q95, col = 'blue', lwd = 2)
abline(h = q90, col = 'red', lwd = 2)
plot(all_popPairsSum_fixed, main = "Density of pop-pair Fst Sums - Fixed", ylab = "Sum of Variant Fst", xlab = "Index of Sample", pch = 20, cex = .5)
abline(h = q99, col = 'green', lwd = 2)
abline(h = q95, col = 'blue', lwd = 2)
abline(h = q90, col = 'red', lwd = 2)
plot(all_popPairsSum_fixed, main = "Density of pop-pair Fst Sums - Fixed", ylab = "Sum of Variant Fst", xlab = "Index of Sample", pch = 20, cex = .7)
abline(h = q99, col = 'green', lwd = 2)
abline(h = q95, col = 'blue', lwd = 2)
abline(h = q90, col = 'red', lwd = 2)
text(q99, par("usr")[4], "1%", pos = 3, offset = 0.5)
text(q95, par("usr")[4], "5%", pos = 3, offset = 0.5)
text(q90, par("usr")[4], "10%", pos = 3, offset = 0.5)
text(q99, par("usr")[4], "1%", pos = 3, offset = 0.5, col = 'black')
?text
text(0, y = q99, par("usr")[4], "1%", pos = 3, offset = 0.5, col = 'black')
?par
text(0, y = q99, "1%", pos = 3, offset = 0.5, col = 'black')
text(0, y = q99, "1%", pos = 3, offset = -0.5, col = 'black')
text(0, y = q99, "1%", pos = 2, offset = 0.5, col = 'green')
text(0, y = q99, "1%", pos = 2, offset = 2, col = 'green')
text(0, y = q99, "1%", pos = 2, offset = 5, col = 'green')
text(-10, y = q99, "1%", pos = 3, offset = .5, col = 'green')
text(-1000, y = q99, "1%", pos = 3, offset = .5, col = 'green')
text(-10000, y = q99, "1%", pos = 3, offset = .5, col = 'green')
text(-5000, y = q99, "1%", pos = 3, offset = .5, col = 'green')
text(-4000, y = q99, "1%", pos = 3, offset = .5, col = 'green')
colors()
plot(all_popPairsSum_fixed, main = "Density of pop-pair Fst Sums - Fixed", ylab = "Sum of Variant Fst", xlab = "Index of Sample", pch = 20, cex = .7)
abline(h = q99, col = 'green', lwd = 2)
abline(h = q95, col = 'blue', lwd = 2)
abline(h = q90, col = 'red', lwd = 2)
text(-4000, y = q99, "1%", pos = 3, offset = .5, col = 'darkgreen')
text(-4000, y = q95, "5%", pos = 3, offset = .5, col = 'darkblue')
text(-4000, y = q90, "10%", pos = 3, offset = .5, col = 'darkred')
plot(all_popPairsSum_fixed, main = "pop-pair Fst Sums - Fixed", ylab = "Sum of Variant Fst", xlab = "Index of Sample", pch = 20, cex = .7)
abline(h = q99, col = 'green', lwd = 2)
abline(h = q95, col = 'blue', lwd = 2)
abline(h = q90, col = 'red', lwd = 2)
text(-4000, y = q99, "1%", pos = 3, offset = .5, col = 'darkgreen')
text(-4000, y = q95, "5%", pos = 3, offset = .5, col = 'darkblue')
text(-4000, y = q90, "10%", pos = 3, offset = .5, col = 'darkred')
summary_stats <- c("Mean" = mean(all_popPairsFst_fixed),
"Median" = median(all_popPairsFst_fixed),
"Standard Deviation" = sd(all_popPairsFst_fixed))
summary_stats <- c("Mean" = mean(all_popPairsSum_fixed),
"Median" = median(all_popPairsSum_fixed),
"Standard Deviation" = sd(all_popPairsSum_fixed))
plot(dens, main = "Density of pop-pair Fst - Fixed", legend = summary_stats)
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 0.00   13.20   24.69   31.12   42.84  197.01
#
abline(v = q99, col = 'green', lwd = 2)
abline(v = q95, col = 'blue', lwd = 2)
abline(v = q90, col = 'red', lwd = 2)
legend("topright", inset = 0.02, legend = summary_stats, bg = "white")
summary_stats
sumSts <- c("Mean: 3.12", "Median: 24.69", "Standard Deviation: 23.91")
legend("topright", inset = 0.02, legend = sumSts, bg = "white")
legend("topright", inset = 0.02, legend = sumSts, bg = "white", cex = .6)
legend("topright", inset = 0.02, legend = sumSts, bg = "white", cex = .75)
legend("topright", inset = 0.02, legend = sumSts, bg = "white", cex = .75, text.font = 2)
warnings()
legend("topright", inset = 0.02, legend = sumSts, bg = "white", cex = .75, text.font = 4)
plot(dens, main = "Density of pop-pair Fst - Fixed")
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 0.00   13.20   24.69   31.12   42.84  197.01
#
abline(v = q99, col = 'green', lwd = 2)
abline(v = q95, col = 'blue', lwd = 2)
abline(v = q90, col = 'red', lwd = 2)
legend("topright", inset = 0.02, legend = sumSts, bg = "white", cex = .85, text.font = 4, box.lwd = 0)
legend("topright", inset = 0.02, legend = sumSts, bg = "white", cex = .75, text.font = 4, box.lwd = 0)
legend("topright", inset = 0.02, legend = sumSts, bg = "white", cex = .80, text.font = 4, box.lwd = 0)
plot(dens, main = "Density of pop-pair Fst - Fixed")
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 0.00   13.20   24.69   31.12   42.84  197.01
#
abline(v = q99, col = 'green', lwd = 2)
abline(v = q95, col = 'blue', lwd = 2)
abline(v = q90, col = 'red', lwd = 2)
legend("topright", inset = 0.02, legend = sumSts, bg = "white", cex = .80, text.font = 4, box.lwd = 0)
View(asso)
View(full_SNP_Annotations_GWASc_Ensembl)
uni_clin_sig <- unique(full_SNP_Annotations_GWASc_Ensembl$EnsVar_clinical_significance)
uni_clin_sig
sumSts <- c("Mean: 3.12", "Median: 24.69", "Standard Deviation: 23.91", "Min: 0.00", "Max: 197.01")
legend("topright", inset = 0.02, legend = sumSts, bg = "white", cex = .80, text.font = 4, box.lwd = 0)
All.ignore('full_data_for_analysis')
library(devtools)
All.ignore('full_data_for_analysis')
View(master_fst)
