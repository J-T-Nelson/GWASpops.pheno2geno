library(devtools)
document()
## code to prepare `DATASET` dataset goes here
popFreq_keyTable <- function() {
if(!require(data.table)){
install.packages('data.table')
library(data.table, include.only = 'fread')
}
library(data.table, include.only = 'fread')
table <- fread('./data_and_testData/PopulationFrequencyDataKey.csv', col.names = c('Population_Abbreviation', 'Sample_Count', 'Pop_Ancestry', 'PopAnces_Graph_Labels'))
# cat('TIP: View the popFreqTable you\'ve created and click on Pop_Ancestry to sort
#     alphabetically to easily identify population abbreviations of interest.')
return(table)
}
popFreqKeyData <- popFreq_keyTable()
#usethis::use_data(DATASET, overwrite = TRUE)
usethis::use_data(popFreqKeyData, overwrite = TRUE)
if(!require(data.table)){
install.packages('data.table')
library(data.table, include.only = 'fread')
}
#usethis::use_data(DATASET, overwrite = TRUE)
usethis::use_data(popFreqKeyData, overwrite = TRUE)
View(popFreqKeyData)
#usethis::use_data(DATASET, overwrite = TRUE)
usethis::use_data(popFreqKeyData, overwrite = TRUE)
popFreqKeyData
Populations <- fread('./data_and_testData/PopulationFrequencyDataKey.csv', col.names = c('Population_Abbreviation', 'Sample_Count', 'Pop_Ancestry', 'PopAnces_Graph_Labels'))
#usethis::use_data(DATASET, overwrite = TRUE)
usethis::use_data(Populations, overwrite = TRUE)
document()
document()
document()
#'
#' @param fileFolderPath directory path where one or more GWAS tables are stored.
#' @param varAnnotations TRUE by default. When TRUE Ensembl Variation API endpoint is called to retrieve genetic variant data
#' @param population_data FALSE by default. When TRUE population allele frequency data will be retrieved in addition to basic variant data from variation endpoint
#'
#' @returns When varAnnotations & population_data are FALSE a data.frame is returned. When either or both arguments are TRUE instead a list containing different data tables will be returned.
#'
#' @example N/A
#'
#' @export
createMT <- function(fileFolderPath,
varAnnotations = TRUE,
population_data = FALSE){
#importing GWAS data and smashing into single data.frame
GWAS_DF_list <- importGWAS_DataTables(fileFolderPath)
GWAS_DF <- assoStudyMerge_fromImportedList(GWAS_DF_list)
if(!varAnnotations && population_data){ #simplifying user experience by not allowing invalid input and informing them about invalid input.
warning("varAnnotations must be True to retrieve population data\nSetting varAnnotations to TRUE and proceeding to retreive data.")
varAnnotations = TRUE
}
# calling Ensembl API for both variant and population allele frequency data
if(varAnnotations && population_data){
var_pop_list <- get_ensVariants(GWAS_DF$VariantID, population_data = TRUE)
masterTable <- merge(GWAS_DF, var_pop_list[[1]], by.x = 'VariantID', by.y = 'EnsVar_name')
popFreqInfoTable <- popFreq_keyTable() # loading the labels / annotations for populations (necessary for graphing later on with labels)
# Transforming data for single population based data tables
singlePop_alleleFreqDTs <- lapply(popFreqInfoTable$Population_Abbreviation,
function(x) singlePopTransform(var_pop_list[[2]], targetPopulation = x))
names(singlePop_alleleFreqDTs) <- popFreqInfoTable$Population_Abbreviation
masterList <- list(masterTable, var_pop_list[[2]], popFreqInfoTable, singlePop_alleleFreqDTs)
names(masterList) <- c('masterTable', 'PopAlleleFreqData', 'popFreqData_annotations', 'singlePop_alleleFreqDTs')
return(masterList)
}
# calling Ensembl API for only variant data
if(varAnnotations){
#create variant-annotation table and merge into master table
variant_Anno_Table <- get_ensVariants(GWAS_DF$VariantID)
masterTable <- merge(GWAS_DF, variant_Anno_Table, by.x = 'VariantID', by.y = 'EnsVar_name')
} else{
masterTable <- GWAS_DF #if annotation isn't desired, the master table IS the GWAS data.frame
}
return(masterTable)
}
source(pipeline_helperFuncs.R)
source('pipeline_helperFuncs.R')
getwd()
setwd('./R')
getwd()
source('pipeline_helperFuncs.R')
source('data_retrivalFixingLoading.R')
source('get_ensVariants.R')
source('plotting_graphing.R')
setwd('..')
getwd()
history()
?history
history(max.show = 20)
createMT(".\data_and_testData\GWASc_air_pollution_search")
createMT("./data_and_testData/GWASc_air_pollution_search", varAnnotations = FALSE)
source('pipeline_helperFuncs.R')
source('pipeline_masterFuncs.R')
setwd('./R')
source('pipeline_helperFuncs.R')
source('pipeline_masterFuncs.R')
source('pipeline_masterFuncs.R')
source('pipeline_masterFunc.R')
source('data_retrivalFixingLoading.R')
source('get_ensVariants.R')
source('plotting_graphing.R')
setwd('..')
createMT("./data_and_testData/GWASc_air_pollution_search", varAnnotations = FALSE)
if(!require(tidyverse)){
install.packages('tidyverse')
library(tidyverse)
}
createMT("./data_and_testData/GWASc_air_pollution_search", varAnnotations = FALSE)
GWASdata <- createMT("./data_and_testData/GWASc_air_pollution_search", varAnnotations = FALSE)
GWAS.asso.study.data <- createMT("./data_and_testData/GWASc_air_pollution_search", varAnnotations = FALSE)
usethis::use_data(GWAS.asso.study.data, overwrite = TRUE)
testDataObject <- matrix(c(2,252,6,6,62,62,6,26,6),nrow = 3)
testDataObject
?save
save(testDataObject, file = './data')
save(testDataObject, file = 'testDataObject.rda')
rm(testDataObject)
rm(Populations, GWAS.asso.study.data, GWASdata)
Populations
document()
GWAS.asso.study.data
testDataObject
library(lobstr)
install.packages('lobstr')
library(lobstr)
mem_used()
unload("tidyverse")
mem_used()
library("tidyverse")
mem_used()
mem_used()
mem_used()
mem_used()
?data
test123 <- data("testDataObject")
test123 <- data(testDataObject)
test123
test1234 <- data(testDataObject)
data("Populations")
rm(test123,test1234)
data("testDataObject")
data("GWAS.asso.study.data")
force(tree)
globalenv()
?globalenv
.GlobalEnv
environment()
search()
(.packages())
.packages()
View(`:::`)
as.environment(stringr)
as.environment("package::stringr")
as.environment("package:stringr")
View(rlang_downstream_check)
ls()
ls(base)
ls(package:base)
ls
createMT
[[]]
[[
.[[
%*%
class
ls()
ls(all.names = T)
ls.str()
internalDataExample <- sample(100)
library(devtools)
library(devtools)
library(data.table)
library(tidyverse)
use_data(internalDataExample, internal = TRUE)
rm(internalDataExample)
internalDataExample
load("D:/Programming/R_projects/Kulathinal_Lab/GWASpops.pheno2geno/R/sysdata.rda")
rm(internalDataExample)
internalDataExample
sysdata
load(sysdata)
setwd('./R')
load(sysdata)
load(sysdata.rda)
load('sysdata.rda')
setwd('..')
rm(internalDataExample)
setwd('./R')
internalDataExample
load('sysdata')
load('sysdata.rda')
?is.na
?arrange
document()
?desc
?str_replace_all
?fwrite
?select
?pluck
?str_flatten
?as_tibble
?as.character
?is.null
?%>%
?magrittr
?duplicated
conflicts(detail = TRUE)
?bind_rows
?flatten
?content
?shQuote
?stop_for_status
?accept
?http_type
?POST
?content_type
?content
library(NCmisc)
list.functions.in.file(pipeline_helperFuncs.R)
setwd('./R')
getwd()
list.functions.in.file('pipeline_helperFuncs.R')
list.functions.in.file('pipeline_masterFunc.R')
list.functions.in.file('plotting_graphing.R')
list.functions.in.file('pipeline_masterFunc.R')
document()
document()
library(GWASpops.pheno2geno)
a <- "Extends GWAS Catalog such that Population-Specific Allele Frequency Data can be easily Retrieved and Visualized"
nchar(a)
b <- "Extends GWAS Catalog data to Include Population Allele Frequency Data for Visualization and Tabulation"
nchar(b)
c <- "Extends GWAS Catalog: Population SNP Frequency Visualization and Tabulation"
nchar(c)
oldTitle <- "Extends GWAS Catalog such that Population-Specific Allele Frequency Data can be easily Retrieved and Visualized "
rm(a,b,c)
b <- "Download, Manipulate, and Present American Community Survey and Decennial Data from the US Census"
nchar(b)
rm(b)
person()
?person
version
GWAS.asso.study.data
GWAS.asso.study.data
Populations
pops <- Populations
testData <- GWAS.asso.study.data
sys.data
document()
source('workingBootCalls.R')
ls()
source('workingBootCalls.R')
document()
sys.data
GWAS.asso.study.data
load('sysdata.rda')
?load
load('./data/sysdata.rda')
who
?who
GWASdata <- GWAS.asso.study.data
popData <- Populations
View(popData)
as.tibble(Populations)
class(Populations)
View(GWASdata)
class(GWASdata)
document()
?Populations
document()
?Populations
?GWAS.asso.study.data
document()
document
document()
document()
internalDataExample
load("D:/Programming/R_projects/Kulathinal_Lab/GWASpops.pheno2geno/data/sysdata.rda")
document()
document()
View(GWASdata)
document()
document()
document()
use_agpl3_license()
source('workingBootCalls.R')
use_build_ignore('workingBootCalls.R')
library(GWASpops.pheno2geno)
gwasData <- GWAS.asso.study.data
view(gwasData)
?GWAS.asso.study.data
?createMT
?populations
Populations
document()
?Populations
?GWAS.asso.study.data
gwasData[1,]
?Encoding
Encoding(gwasData[1,])
class(gwasData[1,])
as.character(gwasData[1,])
class(as.character(gwasData[1,]))
Encoding(class(as.character(gwasData[1,])))
Encoding(class(as.character(gwasData[1,'Title'])))
gwasData(1,'Title')
gwasData[1, 'Title']
class(gwasData[1,'Title'])
Encoding(as.character(gwasData[1,'Title']))
as.character(gwasData[1,'Title'])
as.character(gwasData[10,'Title'])
Encoding(as.character(gwasData[10,'Title']))
x. <- x <- "fa\xE7ile"
Encoding(x)
Encoding(x.)
x
?iconv
Encoding(x) <- "latin1"
x
xx <- iconv(x, "latin1", "UTF-8")
encoding(c(x.,x,xx))
Encoding(c(x.,x,xx))
a <- gwasData[1,"Title"]
a <- as.character(gwasData[1,"Title"])
a
class(a)
str(a)
Encoding(a)
a2 <- a
a3 <- a
Encoding(a2) <- "latin1"
a2
encoding(a3) <- 'UTF-8'
Encoding(a3) <- 'UTF-8'
a3
a
Encoding(a)
Encoding(a3)
gd <- gwasData[,'Title']
class(gd)
gd <- as.character(gwasData[,'Title'])
class(gd)
Encoding(gd)
Encoding(gd) <- 'UTF-8'
Encoding(gd)
gwasData[,'Title'] <- gd
gwasData[,'Title']
class(gwasData[,'Title'])
Encoding(as.character(gwasData[,'Title']))
GWAS.asso.study.data <- createMT("./data_and_testData/GWASc_air_pollution_search", varAnnotations = FALSE)
titleReEncoding <- Encoding(as.character(GWAS.data[ ,'Title'])) <- 'UTF-8'
titleReEncoding <- Encoding(as.character(GWAS.asso.study.data[ ,'Title'])) <- 'UTF-8'
titleVec <- as.character(GWAS.asso.study.data[ ,'Title'])
titleReEncoding <- Encoding(titleVec) <- 'UTF-8'
Encoding(titleReEncoding)
Encoding(titleReEncoding)
head(titleReEncoding)
titleVec
Encoding(titleVec)
Encoding(titleVec) <- 'UTF-8'
titleVec <- as.character(GWAS.asso.study.data[ ,'Title'])
Encoding(titleVec) <- 'UTF-8'
titleVec <- as.character(GWAS.asso.study.data[ ,'Title'])
Encoding(titleVec)
Encoding(titleVec) <- 'UTF-8'
Encoding(titleVec)
GWAS.asso.study.data[ , 'Title'] <- titleVec #not sure if this will fix the encoding issue... if not, I suppose I can rewrite the values which are causing issues manually instead of using the Encoding() func...
usethis::use_data(GWAS.asso.study.data, overwrite = TRUE)
nchar('dogs')
?nchar
nchar('dogs', type='bytes')
nchar('GWASpops.pheno2geno/data_and_testData/GWASc_air_pollution_search/efotraits_EFO_0006924-studies-2022-06-14.csv', type='bytes')
use_build_ignore('data-raw')
?frequencyt
?frequency
d <- data.frame(x=1,y=2)
d
view(d)
x <- "y"
d[,x]
d[,x,drop=FALSE]
?[]
?[
d1 <- d[,x,drop=FALSE]
d2 <- d[,x]
d1
d2
str(d1)
str(d2)
view(d1)
view(d2)
?subset
mtcars["hp" > 250, ]
hp <- 'hp'
mtcars[hp > 250, ]
Populations$Population_Abbreviation
document()
library(GWASpops.pheno2geno)
testMT <- createMT("D:\\Programming\\R_projects\\Kulathinal_Lab\\GWASpops.pheno2geno\\exampleData\\air_pollution\\efotraits_EFO_0008255-associations-2022-06-14.csv", population_data = TRUE)
testMT <- createMT("D:\\Programming\\R_projects\\Kulathinal_Lab\\GWASpops.pheno2geno\\exampleData\\singleTableTest", population_data = TRUE)
testMTbasic <- createMT('./exampleData/air_pollution', population_data = TRUE)
View(testMTbasic)
?frequency
library(GWASpops.pheno2geno)
