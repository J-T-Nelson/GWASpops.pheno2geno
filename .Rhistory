titleReEncoding <- Encoding(as.character(GWAS.data[ ,'Title'])) <- 'UTF-8'
titleReEncoding <- Encoding(as.character(GWAS.asso.study.data[ ,'Title'])) <- 'UTF-8'
titleVec <- as.character(GWAS.asso.study.data[ ,'Title'])
titleReEncoding <- Encoding(titleVec) <- 'UTF-8'
Encoding(titleReEncoding)
Encoding(titleReEncoding)
head(titleReEncoding)
titleVec
Encoding(titleVec)
Encoding(titleVec) <- 'UTF-8'
titleVec <- as.character(GWAS.asso.study.data[ ,'Title'])
Encoding(titleVec) <- 'UTF-8'
titleVec <- as.character(GWAS.asso.study.data[ ,'Title'])
Encoding(titleVec)
Encoding(titleVec) <- 'UTF-8'
Encoding(titleVec)
GWAS.asso.study.data[ , 'Title'] <- titleVec #not sure if this will fix the encoding issue... if not, I suppose I can rewrite the values which are causing issues manually instead of using the Encoding() func...
usethis::use_data(GWAS.asso.study.data, overwrite = TRUE)
nchar('dogs')
?nchar
nchar('dogs', type='bytes')
nchar('GWASpops.pheno2geno/data_and_testData/GWASc_air_pollution_search/efotraits_EFO_0006924-studies-2022-06-14.csv', type='bytes')
use_build_ignore('data-raw')
?frequencyt
?frequency
d <- data.frame(x=1,y=2)
d
view(d)
x <- "y"
d[,x]
d[,x,drop=FALSE]
?[]
?[
d1 <- d[,x,drop=FALSE]
d2 <- d[,x]
d1
d2
str(d1)
str(d2)
view(d1)
view(d2)
?subset
mtcars["hp" > 250, ]
hp <- 'hp'
mtcars[hp > 250, ]
Populations$Population_Abbreviation
document()
library(GWASpops.pheno2geno)
testMT <- createMT("D:\\Programming\\R_projects\\Kulathinal_Lab\\GWASpops.pheno2geno\\exampleData\\air_pollution\\efotraits_EFO_0008255-associations-2022-06-14.csv", population_data = TRUE)
testMT <- createMT("D:\\Programming\\R_projects\\Kulathinal_Lab\\GWASpops.pheno2geno\\exampleData\\singleTableTest", population_data = TRUE)
testMTbasic <- createMT('./exampleData/air_pollution', population_data = TRUE)
View(testMTbasic)
?frequency
library(GWASpops.pheno2geno)
version
class(version)
packageVersion("rlang")
install.packages('rlang')
install.packages("rlang")
library(rlang)
packageVersion(purr)
packageVersion(purrr)
packageVersion('purrr')
.libPaths()
packageVersion("rmarkdown")
library(rmarkdown)
?md_document
library(devtools)
use_build_ignore('README.md')
use_build_ignore('README.Rmd')
use_build_ignore('exampleData')
use_build_ignore('man/example_graphs')
source('workingBootCalls.R')
createMT('')
createMT('./exampleData/air_pollution', population_data = T)
masterList <- createMT('./exampleData/air_pollution', population_data = T)
use_data(masterList, internal = T)
ml <- masterList
use_git_ignore('data/sysdata.rda')
use_build_ignore('data/sysdata.rda')
View(ml)
rm(ml)
A <- matrix(c(0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0), nrow = 4)
A
A%*%A
A**2
A**5
A2 <- A%*%A
A3 <- A2%*%A
A3
A4 <- A3%*%A
A4
A5 <- A4%*%A
A5
B <- matrix(c(2,4,3,5), nrow = 2)
solve(B)
Binv <- solve(B)
B%*%Binv
B+Binv
Bee <- B+Binv
BBee <- B%*%Bee
BeeB <- Bee%*%B
BBee
BeeB
Beee <- Bee+Binv
Beee
BeeeB <- Beee%*%B
BBeee <- B%*%Beee
BeeeB
BBeee
Bee%*%B
C <- matrix(c(1,5,7,8), nrow = 2)
C%*%B
B%*%C
library(GWASpops.pheno2geno)
?consequential_mTable
library(devtools)
document()
library(GWASpops.pheno2geno)
?GWASpops.pheno2geno
??GWASpops.pheno2geno
?dplyr
?GWASpops.pheno2geno
?httr
??httr
?ggplot2
??ggplot2
?dplyr
library(dplyr)
?dplyr
library(GWASpops.pheno2geno)
?GWASpops.pheno2geno
??GWASpops.pheno2geno
library(ggplot2)
?ggplot2
?Populations
document()
library(devtools)
document()
document()
document()
?GWASpops.pheno2geno
library(GWASpops.pheno2geno)
?GWASpops.pheno2geno
A <- matrix(c(0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0), nrow=4)
A
A%*%A
A%*%A%*%A
A%*%A%*%A%*%A
A%*%A%*%A%*%A%*%A
B <- matrix(c(0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0), nrow = 6)
B
B%*%B
B%*%B%*%B
B%*%B%*%B%*%B
B%*%B%*%B%*%B%*%B
B%*%B%*%B%*%B%*%B%*%B
B%*%B%*%B%*%B%*%B%*%B%*%B
source('workingBootCalls.R')
load('./data/sysdata.rda')
document()
document()
unload("GWASpops.pheno2geno")
library(GWASpops.pheno2geno)
?createMT
document()
?createMT
document(0)
document()
?createMT
#'
#' @returns When varAnnotations & population_data are FALSE a data.frame is returned. When either or both arguments are TRUE instead a list containing different data tables will be returned.
#'
#' @examples # Calling function with example data available on https://github.com/J-T-Nelson/GWASpops.pheno2geno
#' # Download the 'exampleData' folder from github, then relocate it to the working directory you're working in currently for this command to run.
#' masterList <- createMT("./exampleData/air_pollution", population_data = TRUE)
#'
#' # The call above will take some time and thus serves best as an example of how to use the function.
#'
#' @export
createMT <- function(fileFolderPath,
varAnnotations = TRUE,
population_data = FALSE){
#importing GWAS data and smashing into single data.frame
GWAS_DF_list <- importGWAS_DataTables(fileFolderPath)
GWAS_DF <- list2table_associations_studies(GWAS_DF_list)
if(!varAnnotations && population_data){ #simplifying user experience by not allowing invalid input and informing them about invalid input.
warning("varAnnotations must be True to retrieve population data\nSetting varAnnotations to TRUE and proceeding to retreive data.")
varAnnotations = TRUE
}
# calling Ensembl API for both variant and population allele frequency data
if(varAnnotations && population_data){
var_pop_list <- get_ensVariants(GWAS_DF$VariantID, population_data = TRUE)
masterTable <- merge(GWAS_DF, var_pop_list[[1]], by.x = 'VariantID', by.y = 'EnsVar_name')
# Transforming data for single population based data tables
singlePop_alleleFreqDTs <- lapply(Populations$Population_Abbreviation,
function(x) singlePopTransform(var_pop_list[[2]], targetPopulation = x))
names(singlePop_alleleFreqDTs) <- Populations$Population_Abbreviation
masterList <- list(masterTable, var_pop_list[[2]], singlePop_alleleFreqDTs)
names(masterList) <- c('masterTable', 'PopAlleleFreqData', 'singlePop_alleleFreqDTs')
return(masterList)
}
# calling Ensembl API for only variant data
if(varAnnotations){
#create variant-annotation table and merge into master table
variant_Anno_Table <- get_ensVariants(GWAS_DF$VariantID)
masterTable <- merge(GWAS_DF, variant_Anno_Table, by.x = 'VariantID', by.y = 'EnsVar_name')
} else{
masterTable <- GWAS_DF #if annotation isn't desired, the master table IS the GWAS data.frame
}
return(masterTable)
}
document()
?createMT
rm(createMT)
document()
?createMT
?arrange
?createMT
document()
?createMT
document()
?createMT
gwasData$VariantID[1:5]
document()
document()
?get_ensVariants
View(masterList)
tableList <- masterList[[2]][[1:5]]
tableList <- masterList[[2]][1:5]
View(tableList)
write_csv_listOf_DFs(tableList, pattern = 'rs', replacementChar = 'DOGTABLE')
document()
?write_csv_listOf_DFs
document()
?write_csv_listOf_DFs
use_data(masterList, overwrite = T)
test_masterList <- masterList
use_data(test_masterList, overwrite = T)
testMasterList <- masterList
rm(test_masterList)
use_data(test_masterList, overwrite = T)
use_data(testMasterList, overwrite = T)
View(masterList)
document()
?testMasterList
?GWASpops.pheno2geno
graph_varPopFrequencies(masterList[[2]][1])
masterList[[2]][1]
masterList[[2]][[1]]
graph_varPopFrequencies(masterList[[2]][[1]])
document()
?graph_varPopFrequencies
document()
?graph_varPopFrequencies
graph_singlePopAlleleFreq(testMasterList[[3]][[1]])
graph_singlePopAlleleFreq(testMasterList[[3]][1])
graph_singlePopAlleleFreq(testMasterList[[1]],testMasterList[[3]][1])
graph_singlePopAlleleFreq(testMasterList[[1]],testMasterList[[3]][[1]])
document()
?graph_singlePopAlleleFreq
browseVignettes()
?usethis
library(usethis)
use_git_ignore("./GWAS.data")
use_build_ignore("./GWAS.data")
# option 1
masterTable_1 <- createMT('./GWAS.data', varAnnotations = FALSE)
library(GWASpops.pheno2geno)
masterTable_1 <- createMT('./GWAS.data', varAnnotations = FALSE)
# option 2, varAnnotations is TRUE be default and thus we simply don't alter its state.
masterTable_2 <- createMT('./GWAS.data')
View(masterTable_1)
testMaterList
library(GWASpops.pheno2geno)
usethis::use_data(testMasterList, overwrite = T)
load('./data/testMasterList.rda')
usethis::use_data(testMasterList, overwrite = T)
document()
source('workingBootCalls.R')
document()
rm(testMasterList)
testMasterList
ML <- testMasterList
unload("GWASpops.pheno2geno")
populations
library(GWASpops.pheno2geno)
testMasterList
usethis::use_data(testMasterList, overwrite = T)
load('./data/testMasterList.rda')
usethis::use_data(testMasterList, overwrite = T)
unload("GWASpops.pheno2geno")
library(GWASpops.pheno2geno)
rm(testMasterList)
testMasterList
?testMasterList
?Populations
source('workingBootCalls.R')
testMasterList <- masterList
class(GWAS.asso.study.data[,'Title'])
Encoding(GWAS.asso.study.data[,'Title'])
as.character(GWAS.asso.study.data[,'Title'])
Encoding(as.character(GWAS.asso.study.data[,'Title']))
?Enconding
?Encoding
titleVec <- as.character(GWAS.asso.study.data[ ,'Title'])
Encoding(titleVec) <- 'UTF-8'
Encoding(titleVec)
tempMT <- masterList[[1]]
View(tempMT)
newTitleCol <- as.character(GWAS.asso.study.data[,'Title'])
length(titleVec)
GWAS.asso.study.data[ , 'Title']
View(gwasData)
GWAS.asso.study.data[1 , 'Title']
c <- c('a','b','c', letters)
?vapply
matrix(1:12,3)
tVec <- rep(25, 10)
apply(tVec, 1, sum)
apply(tVec, 2, sum)
apply(tVec, FUN = sum)
dim(tVec)
dim(as.matrix(tVec))
apply(as.matrix(tVec), FUN = sum)
apply(as.matrix(tVec), 1, FUN = sum)
apply(as.matrix(tVec), 2, FUN = sum)
titles <- testMasterList[[1]][, 'Title']
titles[1]
class(titles[1])
encodings_1 <- lapply(titles, function(x) Encoding(as.character(x) ))
View(encodings_1)
encodings_2 <- lapply(titles, function(x) Encoding(as.character(x)) <- 'UTF-8')
for(title in titles){
Encoding(as.character(title)) <- 'UTF-8'
}
Encoding(title)
Encoding(title) <- 'UTF-8'
Encoding(title)
Encoding(title)
Encoding(title) <- 'UTF-8'
Encoding(title) <- 'UTF-8'
Encoding(title)
title[1]
for(title in titles){
Encoding(as.character(title)) <- 'UTF-8'
}
Encoding(title)
?Encoding
enc2utf8(title)
utf8_titles <- enc2utf8(title)
Encoding(utf8_titles)
titles <- testMasterList[[1]][, 'Title']
titles
titles <- as.character(titles)
titles <- testMasterList[[1]][, 'Title']
for(title in titles){
as.character(title)
}
rm(title)
for(title in titles){
as.character(title)
}
rm(title)
for(title in titles){
as.character(title)
}
View(titles)
class(titles)
t1 <- as.vector(titles)
as.character(t1)
t1.1 <- as.character(t1)
rm(t1.1, t1)
rm(c)
?pull
titles_2 <- pull(tempMT, 'Title')
titles_3 <- tempMT[, 'Title']
unload("data.table")
titles_3 <- tempMT[, 'Title'] # this doesn't work..
data.table::fwrite(encodings_1, file = "testFile1.txt")
titles <- tempMT[, 'Title']
rm(titles)
titles <- tempMT[, 'Title']
library(data.table)
detach("package:data.table", unload = TRUE)
titles <- tempMT[, 'Title']
rm(titles)
titles <- tempMT[, 'Title']
titles_4 <- tempMT[, 'Title'] # this doesn't work.. BECAUSE OF data.table's nonstandard evaluation... after unloading it this works fine to grab what I was looking for the whole time.
unload("data.table")
titles_3 <- tempMT[, 'Title'] # this doesn't work.. BECAUSE OF data.table's nonstandard evaluation... after unloading it this works fine to grab what I was looking for the whole time.
titles <- pull(tempMT, 'Title')
Encoding(titles) <- 'UTF-8'
Encoding(titles)
View(titles_3)
test_titles <- testMasterList[[1]][,'Title']
test_titles <- pull(testMasterList[[1]], 'Title')
tempMT[,'Title'] <- titles
Encoding(pull(tempMT,'Title'))
Encoding(test_titles)
testMasterList[[1]] <- tempMT
Encoding(pull(testMasterList[[1]], 'Title'))
usethis::use_data(testMasterList, overwrite = T)
GWAS.asso.study.data <- createMT("./data_and_testData/GWASc_air_pollution_search", varAnnotations = FALSE)
library(GWASpops.pheno2geno)
gwasData
detach("package:GWASpops.pheno2geno", unload = TRUE)
library(GWASpops.pheno2geno)
View(testMasterList)
document()
document()
rm(testMasterList)
tml <- testMasterList
source('bootCalls.R')
source('bootCalls.R')
tml <- testMasterList
GWAS.asso.study.data <- GWAS.asso.study.data
titleVec <- pull(GWAS.asso.study.data, 'Title')
GWAS.asso.study.data <- createMT("./data_and_testData/GWASc_air_pollution_search", varAnnotations = FALSE)
GWAS.asso.study.data <- createMT("./data/air_pollution", varAnnotations = FALSE)
GWAS.asso.study.data <- createMT("./exampleData/air_pollution", varAnnotations = FALSE)
titleVec <- pull(GWAS.asso.study.data, 'Title')
Encoding(titleVec) <- 'UTF-8'
Encoding(titleVec)
GWAS.asso.study.data[ , 'Title'] <- titleVec # Nice fast way to fix encoding of a vector in a structure. Just need to verify the conversion preserves the human-read meaning of the contents of the vec.
Encoding(pull(GWAS.asso.study.data, 'Title'))
usethis::use_data(GWAS.asso.study.data, overwrite = TRUE)
document()
gwa <- GWAS.asso.study.data
View(gwa)
View(gwasData)
rm(gwasData)
?use_data
?build
nGWA <- GWAS.asso.study.data
nGWA[1:5, 'Title']
Encoding(nGWA[1:5, 'Title'])
class(nGWA[1:5, 'Title'])
Encoding(pull(nGWA, 'Title'))
source('bootCalls.R')
MT <- masterList[[1]]
View(masterList)
PopAlleleFreqTables <- masterList[[2]]
singlePopAlleleFreqTables <- masterList[[3]]
View(MT)
View(MT)
aList <- list()
A <- trees
aList[[1:10]] <- rep(A, 10)
aList <- rep(A, 10)
View(aList)
aList <- list()
for(i in 1:10){ aList[i] <- A}
View(aList)
aList[[1]]
for(i in 1:10){ aList[[i]] <- A}
View(aList)
class(trees)
write_csv_listOf_DFs(aList, destinationFolder = './dummy')
write.csv(aList)
?write.csv
setwd('dummy')
getwd()
write.csv(aList, 'filename')
names(aList) <- LETTERS[1:10]
names(aList)
write_csv_listOf_DFs(aList)
names(aList) <- [1:10]
c <- 1:10
names(aList) <- 1:10
names(aList)
write_csv_listOf_DFs(aList)
plot(2^^x)
plot(x^^2)
plot(x**2)
plot(trees)
View(singlePopAlleleFreqTables)
All1kGenomes <- masterList[[3]][[1]]
graph_singlePopAlleleFreq(MT, All1kGenomes)
# preloaded within the package is a masterList which is made up from the GWAS catalog
# tables which can be found from several pages related to 'air pollution' traits
graph_singlePopAlleleFreq(MT, All1kGenomes)
View(masterList)
graph_singlePopAlleleFreq(MT, All1kGenomes, numVariants = 10, graph_style = 'bar', orderless = T)
graph_singlePopAlleleFreq(MT, All1kGenomes, numVariants = 10, facet_graph = T, pValAsSize = T)
graph_singlePopAlleleFreq(MT, All1kGenomes, facet_graph = T, pValAsSize = T)
graph_singlePopAlleleFreq(MT, All1kGenomes, facet_graph = T, pValAsSize = T, orderless = T)
View(MT)
interestingSNP <- masterList[[2]][[10]]
graph_varPopFrequencies(interestingSNP)
?graph_varPopFrequencies
graph_varPopFrequencies(interestingSNP, ascending = T )
graph_varPopFrequencies(interestingSNP, ascending = T , yUpperLim = .5)
graph_varPopFrequencies(interestingSNP, ascending = T , yUpperLim = .25)
?graph_varPopFrequencies
interestingSNP2 <- masterList[[2]][[23]]
graph_varPopFrequencies(interestingSNP2, ascending = T , yUpperLim = .25, graph_style = 'point')
attr(interestingSNP, 'VariantName')
View(masterList)
names(interestingSNP)
name(intersetingSNP)
attributes(interestingSNP)
document()
use_git_ignore('tutorialWorkSpace.R')
use_build_ignore('tutorialWorkSpace.R')
source('bootCalls.R')
graph_varPopFrequencies(interestingSNP)
graph_varPopFrequencies(interestingSNP, ascending = T , yUpperLim = .25)
graph_varPopFrequencies(interestingSNP2, ascending = T , yUpperLim = .25, graph_style = 'point')
?GWAS.asso.study.data
use_git_ignore('workingScripts')
use_build_ignore('workingScripts')
