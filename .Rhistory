View(badentries)
goodEntries <- CONT_noMultiMapping[!mask1]
bCarcinomaVarTrans <- dbugTransform(bCarcinomaVars) # ERROR HERE: `Error in `*tmp*`[[1]] : subscript out of bounds` ... I believe this error is coming from a `failed` name:key pair being introduced in this call. Only 2 instances of it across ~1.3k lists. Thus its certainly uncommon. Going to discard this data, as it seems to represent variants which lack mappings onto reference genomes being called against within Ensembl's database, and thus the data is too incomplete to be considered.
library(GWASpops.pheno2geno)
bCarcinomaVarTrans <- dbugTransform(bCarcinomaVars) # ERROR HERE: `Error in `*tmp*`[[1]] : subscript out of bounds` ... I believe this error is coming from a `failed` name:key pair being introduced in this call. Only 2 instances of it across ~1.3k lists. Thus its certainly uncommon. Going to discard this data, as it seems to represent variants which lack mappings onto reference genomes being called against within Ensembl's database, and thus the data is too incomplete to be considered.
load("data/debugging_raw_data/prostateCancerVars.rds")
prostateCancerVarTrans <- dbugTransform(prostateCancerVars) # FINAL ERROR FOR Var data -- ERROR HERE Error in dbugTransform(prostateCancerVars) :object 'masterTable' not found ...
debug(dbugTransform)
prostateCancerVarTrans <- dbugTransform(prostateCancerVars) # FINAL ERROR FOR Var data -- ERROR HERE Error in dbugTransform(prostateCancerVars) :object 'masterTable' not found ...
View(CONT_Table)
View(GWAS_DF)
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name')
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name', allow.cartesian = T)
View(GWAS_DF)
View(masterTable)
tryCatch(
expr = {masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name')},
error = function(e){ # in the case of too many duplicate rows causing the merge to fail initially this option will allow for the merge to proceed.
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name', allow.cartesian = T);
message("merge.data.table performed with `allow.cartesian = TRUE`, therefore many extra rows may be produced with many possibly being duplicated rows due to duplicates in the tables being merged.")
}
)
rm(masterTable)
tryCatch(
expr = {masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name')},
error = function(e){ # in the case of too many duplicate rows causing the merge to fail initially this option will allow for the merge to proceed.
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name', allow.cartesian = T);
message("merge.data.table performed with `allow.cartesian = TRUE`, therefore many extra rows may be produced with many possibly being duplicated rows due to duplicates in the tables being merged.")
}
)
tryCatch(
expr = {masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name')},
error = function(e){ # in the case of too many duplicate rows causing the merge to fail initially this option will allow for the merge to proceed.
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name', allow.cartesian = T)
}
)
tryCatch(
expr = {masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name')},
error = function(e){
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name', allow.cartesian = T)
}
)
tryCatch(
expr = {masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name')},
error = function(e){
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name', allow.cartesian = T)
}
)
tryCatch(
expr = {masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name')},
error = function(e){
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name', allow.cartesian = T); return(masterTable)
}
)
tryCatch(
expr = {masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name')},
error = function(e){
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name', allow.cartesian = T); return(masterTable)
} finally = {return(masterTable)}
tryCatch(
expr = {masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name')},
error = function(e){
masterTable <- data.table:::merge.data.table(GWAS_DF, CONT_Table, by.x = 'VariantID', by.y = 'EnsVar_name', allow.cartesian = T)
}, finally = {return(masterTable)}
)
dog <- list(LETTERS)
tryCatch(
expr = {cat <- LETTERS}
)
# ^^ assignment works fine here
cat <- <- fog
tryCatch(
expr = {cat <- <-  LETTERS},
tryCatch(
expr = {cat <- <-  LETTERS},
tryCatch(
expr = {cat <- =LETTERS},
tryCatch(
expr = {cat <- LETTERS*2},
error = function(e) {catss <- c(1,2,3,4,6)}
)
cat <- LETTERS*2
catss <- c(1,2,3,4,6)
rm(cat, catss)
tryCatch(
expr = {cat <- LETTERS*2},
error = function(e) {catss <- c(1,2,3,4,6); message('error has executed')}
)
source("D:/Programming/R_projects/Kulathinal_Lab/GWASpops.pheno2geno/workingScripts/Debugging_APIcall.R", echo=TRUE)
tryCatch(
expr = {cat <- LETTERS*2},
error = function(e) {catss <- c(1,2,3,4,6); message('error has executed')},
finally = {return(catss)}
)
tryCatch(
expr = {cat <- LETTERS*2},
error = function(e) {catss <- c(1,2,3,4,6); message('error has executed');return(catss)}
)
objectt <- tryCatch(
expr = {cat <- LETTERS*2},
error = function(e) {catss <- c(1,2,3,4,6); message('error has executed');return(catss)}
)
rm(objectt)
objectt <- tryCatch(
expr = {cat <- LETTERS},
error = function(e) {catss <- c(1,2,3,4,6); message('error has executed');return(catss)}
)
# so do I need the return statement to return the object created in the code of the error block?
rm(objectt, cat, dog)
objectt <- tryCatch(
expr = {cat <- LETTERS*2},
error = function(e) {catss <- c(1,2,3,4,6); message('error has executed')}
)
message("merge.data.table performed with `allow.cartesian = TRUE`,
therefore many extra rows may be produced with many possibly being duplicated
rows due to duplicates in the tables being merged.")
message("merge.data.table performed with `allow.cartesian = TRUE`," +
"therefore many extra rows may be produced with many possibly" +
"being duplicated rows due to duplicates in the tables being merged.")
library(GWASpops.pheno2geno)
prostateCancerVarTrans <- dbugTransform(prostateCancerVars) # FINAL ERROR FOR Var data -- ERROR HERE Error in dbugTransform(prostateCancerVars) :object 'masterTable' not found ...
class(gwasData)
?unique
testDF <- gwasData[1:20,]
dupetestDF <- rbind(testDF, testDF[1:5,])
dupRows <- duplicated(dupetestDF)
sum(dupRows)
dupRows
dupeRowsGWAS <- duplicated(gwasData)
sum(dupeRowsGWAS)
dupeRowsPC <- duplicated(prostateCancerVarTrans)
class(prostateCancerVars)
View(prostateCancerVarTrans)
class(prostateCancerVarsTrans)
class(prostateCancerVarTrans)
class(prostateCancerVarTrans[1,])
class(prostateCancerVarTrans[[1,]])
class(prostateCancerVarTrans[,1])
class(prostateCancerVarTrans$1)
?col
class(prostateCancerVarTrans$VariantID)
DFversion <- as.data.frame(prostateCancerVarTrans)
class(DFversion)
class(DFversion[1,])
class(DFversion[,1:10])
sapply(DFversion, class)
classesOfDF <- sapply(DFversion, class) # this is good
classesOfDF <- as.character(sapply(DFversion, class)) # this is good
classesOfDF
classesOfDFlist <- sapply(DFversion, class) # this is good
View(classesOfDFlist)
View(DFversion)
EnsVar_synonyms <- as.character(DFversion$EnsVar_synonyms)
DFversion$EnsVar_synonyms <- as.character(DFversion$EnsVar_synonyms)
class2 <- sapply(DFversion, class)
class2
DFversion$ # <- using this notation is useful for identifying classes too, as at least lists have a different symbol associated with them
DFversion$ # <- using this notation is useful for identifying classes too, as at least lists have a different symbol associated with them
duplicated(DFversion)
dupeRowsPC <- duplicated(DFversion)
sum(dupeRowsPC)
PCnoDupes <- prostateCancerVarTrans[!dupeRowsPC ]
PCnoDupes <- prostateCancerVarTrans[!dupeRowsPC ] # this works.
prostateCancerVarTrans$EnsVar_synonyms <- as.character(prostateCancerVarTrans$EnsVar_synonyms)
library(GWASpops.pheno2geno)
prostateCancerVarTrans <- dbugTransform(prostateCancerVars) # FINAL ERROR FOR Var data -- ERROR HERE Error in dbugTransform(prostateCancerVars) :object 'masterTable' not found ...
source('bootCalls.R')
load("data/debugging_raw_data/alcConsumpAlldata.rds")
alcConsumpAllTrans <- dbugTransform(alcConsumpAlldata, popsData = T) # error here... once again, Ancestral Allele issue... weird. Wonder if I didn't save my progress last time...  (12-15-2022) Looks like I didn't manage to recomplie the package which is why the executed version of the dbugTransform() func doesn't contain the code I would expect it to. I really need to define startup and windown processes that are a necessary part of my workflow whenever I am working on code.
load("data/debugging_raw_data/bCarcinomaAlldata.rds")
alcConsumpAllTrans <- dbugTransform(bCarcinomaAlldata, popsData = T)
load("data/debugging_raw_data/AirPollutionAlldata.rds")
AirPollutionAllTrans <- dbugTransform(AirPollutionAlldata, popsData = T)
View(AirPollutionAlldata)
View(AirPollutionAllTrans)
load("data/debugging_raw_data/AirPollutionVars.rds")
View(AirPollutionAlldata)
View(AirPollutionVars)
View(AirPollutionAlldata)
debug(dbugTransform)
alcConsumpAllTrans <- dbugTransform(alcConsumpAlldata, popsData = T) # error here... once again, Ancestral Allele issue... weird. Wonder if I didn't save my progress last time...  (12-15-2022) Looks like I didn't manage to recomplie the package which is why the executed version of the dbugTransform() func doesn't contain the code I would expect it to. I really need to define startup and windown processes that are a necessary part of my workflow whenever I am working on code.
library(GWASpops.pheno2geno)
library(GWASpops.pheno2geno)
alcConsumpAllTrans <- dbugTransform(alcConsumpAlldata, popsData = T) # error here... once again, Ancestral Allele issue... weird. Wonder if I didn't save my progress last time...  (12-15-2022) Looks like I didn't manage to recomplie the package which is why the executed version of the dbugTransform() func doesn't contain the code I would expect it to. I really need to define startup and windown processes that are a necessary part of my workflow whenever I am working on code.
alcConsumpAllTrans <- dbugTransform(alcConsumpAlldata, popsData = T) # error here... once again, Ancestral Allele issue... weird. Wonder if I didn't save my progress last time...  (12-15-2022) Looks like I didn't manage to recomplie the package which is why the executed version of the dbugTransform() func doesn't contain the code I would expect it to. I really need to define startup and windown processes that are a necessary part of my workflow whenever I am working on code.
debug(dbugTransform)
alcConsumpAllTrans <- dbugTransform(alcConsumpAlldata, popsData = T) # error here... once again, Ancestral Allele issue... weird. Wonder if I didn't save my progress last time...  (12-15-2022) Looks like I didn't manage to recomplie the package which is why the executed version of the dbugTransform() func doesn't contain the code I would expect it to. I really need to define startup and windown processes that are a necessary part of my workflow whenever I am working on code.
View(filteredList)
s <- sapply(filteredList, attributes)
View(s)
rm(s)
attributes(filteredList[[1]])
attr(filteredList[[1]], 'Ancestral-Allele')
?attr
attr(filteredList[[1]], 'Ancestral_Allele')
s <- sapply(filteredList, attr(, 'Ancestral_Allele'))
s <- sapply(filteredList, attr(filteredList, 'Ancestral_Allele'))
s <- sapply(filteredList,\(x) attr(x, 'Ancestral_Allele'))
View(s)
AirPollutionAllTrans <- dbugTransform(AirPollutionAlldata, popsData = T)
s <- sapply(filteredList, \(x) attr(x, "Ancestral_Allele"))
saaaaaaaa <- sapply(filteredList, \(x) attr(x, "Ancestral_Allele"))
saaaaaaaa
alcConsumpAllTrans <- dbugTransform(alcConsumpAlldata, popsData = T) # error here... once again, Ancestral Allele issue... weird. Wonder if I didn't save my progress last time...  (12-15-2022) Looks like I didn't manage to recomplie the package which is why the executed version of the dbugTransform() func doesn't contain the code I would expect it to. I really need to define startup and windown processes that are a necessary part of my workflow whenever I am working on code.
View(uniqMasterT)
View(popFreqList)
attributes(popFreqList[[1]])
attributes(popFreqList[[1]])
uniqMasterT[uniqMasterT$EnsVar_name == names(popFreqList[1]), ]$EnsVar_ancestral_allele
names(popFreqList[1])
uniqMasterT["rs72787062"]
uniqMasterT$EnsVar_name == "rs72787062"
mask1 = uniqMasterT$EnsVar_name == "rs72787062"
sum(mask1)
maskMask <- is.na(mask1)
sum(maskMask)
library(GWASpops.pheno2geno)
alcConsumpAllTrans <- dbugTransform(alcConsumpAlldata, popsData = T) # error here... once again, Ancestral Allele issue... weird. Wonder if I didn't save my progress last time...  (12-15-2022) Looks like I didn't manage to recomplie the package which is why the executed version of the dbugTransform() func doesn't contain the code I would expect it to. I really need to define startup and windown processes that are a necessary part of my workflow whenever I am working on code.
View(alcConsumpAllTrans)
warnings()
source('bootCalls.R')
devtools::install_github("jabiru/tictoc")
dogmode()
dogmode <- function(){
tic("sleep 1")
Sys.sleep(20)
toc()
tic('sleep2')
Sys.sleep(40)
toc()
}
dogmode()
library(tictoc)
dogmode()
?vapply
?cut
?unlist
?interaction
source('bootCalls.R')
load("data/debugging_raw_data/alcConsumpAlldata.rds")
load("data/debugging_raw_data/bCarcinomaAlldata.rds")
load("data/debugging_raw_data/colorectalCancerAlldata.rds")
load("data/debugging_raw_data/IBFAlldata.rds")
load("data/debugging_raw_data/IntAlldata.rds")
load("data/debugging_raw_data/lungCancerAlldata.rds")
load("data/debugging_raw_data/malabsorptionSyndAlldata.rds")
load("data/debugging_raw_data/neuroticismAlldata.rds")
load("data/debugging_raw_data/prostateCancerAlldata.rds")
load("data/debugging_raw_data/substanceAbuseAlldata.rds")
load("data/debugging_raw_data/AirPollutionAlldata.rds")
library(GWASpops.pheno2geno)
source('bootCalls.R')
library(tictoc)
load("data/debugging_raw_data/malabsorptionSyndVars.rds")
malabsorptionSyndVarTrans <- dbugTransformOPT(malabsorptionSyndVars)
library(GWASpops.pheno2geno)
malabsorptionSyndVarTrans <- dbugTransformOPT(malabsorptionSyndVars)
toc()
library(GWASpops.pheno2geno)
malabsorptionSyndVarTrans <- dbugTransformOPT(malabsorptionSyndVars)
load("data/debugging_raw_data/AirPollutionVars.rds")
AirPollutionVarTrans <- dbugTransformOPT(AirPollutionVars)
load("data/debugging_raw_data/prostateCancerVars.rds")
prostateCancerVarTrans <- dbugTransformOPT(prostateCancerVars)
load("data/debugging_raw_data/colorectalCancerVars.rds")
colorectalCancerVarTrans <- dbugTransformOPT(colorectalCancerVars)
load("data/debugging_raw_data/substanceAbuseVars.rds")
substanceAbuseVarTrans <- dbugTransformOPT(substanceAbuseVars)
load("data/debugging_raw_data/lungCancerVars.rds")
lungCancerVarTrans <- dbugTransformOPT(lungCancerVars)
load("data/debugging_raw_data/bCarcinomaVars.rds")
bCarcinomaVarTrans <- dbugTransformOPT(bCarcinomaVars)
load("data/debugging_raw_data/IBFVars.rds")
IBFVarTrans <- dbugTransformOPT(IBFVars)
load("data/debugging_raw_data/alcConsumpVars.rds")
alcConsumpVarTrans <- dbugTransformOPT(alcConsumpVars)
load("data/debugging_raw_data/neuroticismVars.rds")
neuroticismVarTrans <- dbugTransformOPT(neuroticismVars)
load("data/debugging_raw_data/IntVars.rds")
IntVarTrans <- dbugTransformOPT(IntVars)
load("data/debugging_raw_data/malabsorptionSyndAlldata.rds")
malabsorptionSyndAllTrans <- dbugTransformOPT(malabsorptionSyndAlldata, popsData = T)
debug(dbugTransform)
malabsorptionSyndAllTrans <- dbugTransformOPT(malabsorptionSyndAlldata, popsData = T)
debug(dbugTransformOPT)
malabsorptionSyndAllTrans <- dbugTransformOPT(malabsorptionSyndAlldata, popsData = T)
View(singlePopTable)
attributes(singlePopTable)
View(popFreqList)
SPT <- singlePopTable
attributes(SPT)
attributes(SPT) <- list()
attributes(SPT)
FL2 <- lapply(popFreqList, \(x) x[x$population == targetPopulation])
FL2 <- lapply(popFreqList, \(x) x[x$population == targetPopulation,])
?Sys.time
library(GWASpops.pheno2geno)
source('bootCalls.R')
library(tictoc)
load("data/debugging_raw_data/malabsorptionSyndAlldata.rds")
malabsorptionSyndAllTrans <- dbugTransformOPT(malabsorptionSyndAlldata, popsData = T)
library(GWASpops.pheno2geno)
malabsorptionSyndAllTrans <- dbugTransformOPT(malabsorptionSyndAlldata, popsData = T)
116.78/1.34
1.34/116.78
library(GWASpops.pheno2geno)
malabsorptionSyndAllTrans <- dbugTransformOPT(malabsorptionSyndAlldata, popsData = T)
debug(dbugTransformOPT)
malabsorptionSyndAllTrans <- dbugTransformOPT(malabsorptionSyndAlldata, popsData = T)
singlePopTable2 <- bind_rows(filteredList, .id = 'VariantID') %>% distinct(.keep_all = FALSE)
SPT2 <- singlePopTable2[,!population]
SPT2 <- singlePopTable2[,!'population']
SPT2 <- singlePopTable2[,names(singlePopTable2) != 'population']
undebug(dbugTransformOPT)
load("data/debugging_raw_data/AirPollutionAlldata.rds")
AirPollutionAllTrans <- dbugTransformOPT(AirPollutionAlldata, popsData = T)
load("data/debugging_raw_data/prostateCancerAlldata.rds")
prostateCancerAllTrans <- dbugTransformOPT(prostateCancerAlldata, popsData = T)
load("data/debugging_raw_data/colorectalCancerAlldata.rds")
colorectalCancerAllTrans <- dbugTransformOPT(colorectalCancerAlldata, popsData = T)
load("data/debugging_raw_data/substanceAbuseAlldata.rds")
substanceAbuseAllTrans <- dbugTransformOPT(substanceAbuseAlldata, popsData = T)
library(GWASpops.pheno2geno)
load("data/debugging_raw_data/substanceAbuseAlldata.rds")
substanceAbuseAllTrans <- dbugTransformOPT(substanceAbuseAlldata, popsData = T)
library(GWASpops.pheno2geno)
substanceAbuseAllTrans <- dbugTransformOPT(substanceAbuseAlldata, popsData = T)
substanceAbuseAllTrans <- dbugTransformOPT(substanceAbuseAlldata, popsData = T)
library(GWASpops.pheno2geno)
substanceAbuseAllTrans <- dbugTransformOPT(substanceAbuseAlldata, popsData = T)
load("data/debugging_raw_data/lungCancerAlldata.rds")
lungCancerAllTrans <- dbugTransformOPT(lungCancerAlldata, popsData = T)
load("data/debugging_raw_data/bCarcinomaAlldata.rds")
bCarcinomaAllTrans <- dbugTransformOPT(bCarcinomaAlldata, popsData = T)
load("data/debugging_raw_data/IBFAlldata.rds")
IBFAllTrans <- dbugTransformOPT(IBFAlldata, popsData = T)
load("data/debugging_raw_data/alcConsumpAlldata.rds")
alcConsumpAllTrans <- dbugTransformOPT(alcConsumpAlldata, popsData = T)
load("data/debugging_raw_data/neuroticismAlldata.rds")
neuroticismAllTrans <- dbugTransformOPT(neuroticismAlldata, popsData = T)
load("data/debugging_raw_data/IntAlldata.rds")
IntAllTrans <- dbugTransformOPT(IntAlldata, popsData = T)
#  Question to start today is to try and get rid of warnings first... or to just start reintegrating code? ... reintegrating code is more fundamentally important... If I thought the warnings were important to maintaining data integrity I would prioritize that. But I don't have a way of testing for data integrity to be honest, and it feels a bit beyond the current scope of my ability / this project in my mind. So I may just go straight into integration, and then I will think about the warnings at a later point maybe.
source('bootCalls.R')
library(tictoc)
load("data/debugging_raw_data/malabsorptionSyndVars.rds")
malabsorptionSyndVarTrans <- dbugTransformOPT(malabsorptionSyndVars)
load("data/debugging_raw_data/AirPollutionVars.rds")
AirPollutionVarTrans <- dbugTransformOPT(AirPollutionVars)
load("data/debugging_raw_data/prostateCancerVars.rds")
prostateCancerVarTrans <- dbugTransformOPT(prostateCancerVars)
load("data/debugging_raw_data/colorectalCancerVars.rds")
colorectalCancerVarTrans <- dbugTransformOPT(colorectalCancerVars)
load("data/debugging_raw_data/substanceAbuseVars.rds")
substanceAbuseVarTrans <- dbugTransformOPT(substanceAbuseVars)
load("data/debugging_raw_data/lungCancerVars.rds")
lungCancerVarTrans <- dbugTransformOPT(lungCancerVars)
load("data/debugging_raw_data/bCarcinomaVars.rds")
bCarcinomaVarTrans <- dbugTransformOPT(bCarcinomaVars)
load("data/debugging_raw_data/IBFVars.rds")
IBFVarTrans <- dbugTransformOPT(IBFVars)
load("data/debugging_raw_data/alcConsumpVars.rds")
alcConsumpVarTrans <- dbugTransformOPT(alcConsumpVars)
load("data/debugging_raw_data/neuroticismVars.rds")
neuroticismVarTrans <- dbugTransformOPT(neuroticismVars)
load("data/debugging_raw_data/IntVars.rds")
IntVarTrans <- dbugTransformOPT(IntVars)
load("data/debugging_raw_data/malabsorptionSyndAlldata.rds")
malabsorptionSyndAllTrans <- dbugTransformOPT(malabsorptionSyndAlldata, popsData = T)
load("data/debugging_raw_data/AirPollutionAlldata.rds")
AirPollutionAllTrans <- dbugTransformOPT(AirPollutionAlldata, popsData = T)
load("data/debugging_raw_data/prostateCancerAlldata.rds")
prostateCancerAllTrans <- dbugTransformOPT(prostateCancerAlldata, popsData = T)
load("data/debugging_raw_data/colorectalCancerAlldata.rds")
colorectalCancerAllTrans <- dbugTransformOPT(colorectalCancerAlldata, popsData = T)
load("data/debugging_raw_data/substanceAbuseAlldata.rds")
substanceAbuseAllTrans <- dbugTransformOPT(substanceAbuseAlldata, popsData = T)
load("data/debugging_raw_data/lungCancerAlldata.rds")
lungCancerAllTrans <- dbugTransformOPT(lungCancerAlldata, popsData = T)
load("data/debugging_raw_data/bCarcinomaAlldata.rds")
bCarcinomaAllTrans <- dbugTransformOPT(bCarcinomaAlldata, popsData = T)
warnings()
load("data/debugging_raw_data/IBFAlldata.rds")
IBFAllTrans <- dbugTransformOPT(IBFAlldata, popsData = T)
load("data/debugging_raw_data/alcConsumpAlldata.rds")
alcConsumpAllTrans <- dbugTransformOPT(alcConsumpAlldata, popsData = T)
load("data/debugging_raw_data/neuroticismAlldata.rds")
neuroticismAllTrans <- dbugTransformOPT(neuroticismAlldata, popsData = T)
load("data/debugging_raw_data/IntAlldata.rds")
IntAllTrans <- dbugTransformOPT(IntAlldata, popsData = T)
source('bootCalls.R')
library(GWASpops.pheno2geno)
load("data/debugging_raw_data/malabsorptionSyndVars.rds")
malabsorptionSyndVarTrans <- ensListTransform(malabsorptionSyndVars)
load("data/debugging_raw_data/AirPollutionVars.rds")
AirPollutionVarTrans <- ensListTransform(AirPollutionVars)
load("data/debugging_raw_data/prostateCancerVars.rds")
prostateCancerVarTrans <- ensListTransform(prostateCancerVars)
load("data/debugging_raw_data/colorectalCancerVars.rds")
colorectalCancerVarTrans <- ensListTransform(colorectalCancerVars)
load("data/debugging_raw_data/substanceAbuseVars.rds")
substanceAbuseVarTrans <- ensListTransform(substanceAbuseVars)
load("data/debugging_raw_data/lungCancerVars.rds")
lungCancerVarTrans <- ensListTransform(lungCancerVars)
load("data/debugging_raw_data/bCarcinomaVars.rds")
bCarcinomaVarTrans <- ensListTransform(bCarcinomaVars)
load("data/debugging_raw_data/IBFVars.rds")
IBFVarTrans <- ensListTransform(IBFVars)
load("data/debugging_raw_data/alcConsumpVars.rds")
alcConsumpVarTrans <- ensListTransform(alcConsumpVars)
load("data/debugging_raw_data/neuroticismVars.rds")
neuroticismVarTrans <- ensListTransform(neuroticismVars)
load("data/debugging_raw_data/IntVars.rds")
IntVarTrans <- ensListTransform(IntVars)
load("data/debugging_raw_data/malabsorptionSyndAlldata.rds")
malabsorptionSyndAllTrans <- ensListTransform(malabsorptionSyndAlldata, popsData = T)
load("data/debugging_raw_data/AirPollutionAlldata.rds")
AirPollutionAllTrans <- ensListTransform(AirPollutionAlldata, popsData = T)
load("data/debugging_raw_data/prostateCancerAlldata.rds")
prostateCancerAllTrans <- ensListTransform(prostateCancerAlldata, popsData = T)
load("data/debugging_raw_data/colorectalCancerAlldata.rds")
colorectalCancerAllTrans <- ensListTransform(colorectalCancerAlldata, popsData = T)
load("data/debugging_raw_data/substanceAbuseAlldata.rds")
substanceAbuseAllTrans <- ensListTransform(substanceAbuseAlldata, popsData = T)
load("data/debugging_raw_data/lungCancerAlldata.rds")
lungCancerAllTrans <- ensListTransform(lungCancerAlldata, popsData = T)
load("data/debugging_raw_data/bCarcinomaAlldata.rds")
bCarcinomaAllTrans <- ensListTransform(bCarcinomaAlldata, popsData = T)
load("data/debugging_raw_data/IBFAlldata.rds")
IBFAllTrans <- ensListTransform(IBFAlldata, popsData = T)
load("data/debugging_raw_data/alcConsumpAlldata.rds")
alcConsumpAllTrans <- ensListTransform(alcConsumpAlldata, popsData = T)
load("data/debugging_raw_data/neuroticismAlldata.rds")
neuroticismAllTrans <- ensListTransform(neuroticismAlldata, popsData = T)
load("data/debugging_raw_data/IntAlldata.rds")
IntAllTrans <- ensListTransform(IntAlldata, popsData = T)
source('bootCalls.R')
library(GWASpops.pheno2geno)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
library(GWASpops.pheno2geno)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
debug(createMTfinal)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
rlang::last_error()
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
View(holder)
View(splitList)
holder[[1]]$EnsVar_synonyms
View(holder)
View(holder)
load("data/debugging_raw_data/AirPollutionVars.rds")
View(AirPollutionVars)
library(GWASpops.pheno2geno)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
library(GWASpops.pheno2geno)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
library(GWASpops.pheno2geno)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
debug(createMTfinal)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
View(rsO_list)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
View(CONT)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
View(variant_Anno_Table)
load("data/debugging_raw_data/AirPollutionVars.rds")
View(AirPollutionVars)
View(variant_Anno_Table)
l2 <- AirPollutionVars[[2]]
View(l2)
library(GWASpops.pheno2geno)
debug(createMTfinal)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
dataList <- list(GWAS_DF, variant_dataLists)
load("data/debugging_raw_data/AirPollutionVars.rds")
View(AirPollutionVars)
View(dataList)
library(GWASpops.pheno2geno)
AirPollutionVars <- createMTfinal('exampleData/air_pollution')
# Error in rsO_list[[i]][["mappings"]] : subscript out of bounds .... looks like the data is being over flattened before processing in fixMultiMapping... FIXED
#
AirPollutionAlldata <- createMTfinal('exampleData/air_pollution', population_data = T)
load("data/debugging_raw_data/AirPollutionAlldata.rds")
View(AirPollutionVars)
load("data/debugging_raw_data/AirPollutionVars.rds")
View(AirPollutionVars)
library(GWASpops.pheno2geno)
# Error in rsO_list[[i]][["mappings"]] : subscript out of bounds .... looks like the data is being over flattened before processing in fixMultiMapping... FIXED
#
AirPollutionAlldata <- createMTfinal('exampleData/air_pollution', population_data = T)
alcConsumpVars <- createMTfinal(GWASdataSets[1])
alcConsumpAlldata <- createMTfinal(GWASdataSets[1], population_data = T)
bCarcinomaVars <- createMTfinal(GWASdataSets[2])
bCarcinomaAlldata <- createMTfinal(GWASdataSets[2], population_data = T)
colorectalCancerVars <- createMTfinal(GWASdataSets[3])
colorectalCancerAlldata <- createMTfinal(GWASdataSets[3], population_data = T)
IBFVars <- createMTfinal(GWASdataSets[4])
IBFAlldata <- createMTfinal(GWASdataSets[4], population_data = T)
IntVars <- createMTfinal(GWASdataSets[5])
IntAlldata <- createMTfinal(GWASdataSets[5], population_data = T)
lungCancerVars <- createMTfinal(GWASdataSets[6])
lungCancerAlldata <- createMTfinal(GWASdataSets[6], population_data = T)
malabsorptionSyndVars <- createMTfinal(GWASdataSets[7])
malabsorptionSyndAlldata <- createMTfinal(GWASdataSets[7], population_data = T)
neuroticismVars <- createMTfinal(GWASdataSets[8])
neuroticismAlldata <- createMTfinal(GWASdataSets[8], population_data = T)
prostateCancerVars <- createMTfinal(GWASdataSets[9])
prostateCancerAlldata <- createMTfinal(GWASdataSets[9], population_data = T)
substanceAbuseVars <- createMTfinal(GWASdataSets[10])
substanceAbuseAlldata <- createMTfinal(GWASdataSets[10], population_data = T)
?select
?filter
