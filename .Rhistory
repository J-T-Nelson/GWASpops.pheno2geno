prev_DF <- prev_DF[order(prev_DF$super_population), ] # reorder for graphing
# Generate and save two plots
# 1. allele_freq_labels x aggregate_allele_freqs
# 2. prev_DF$location_name x prev_DF$avg_val
# Set up side-by-side layout
#par(mfrow = c(1, 2))
# Plot 1: Allele frequency labels x Aggregate allele frequencies
plot1 <- ggplot(super_pops) +
geom_bar(aes(x = reorder(allele_freq_labels, super_population), y = aggregate_allele_freqs,
fill = super_population), stat = "identity") +
labs(title = paste("Mean Allele Frequency of", current_disease_name), x = "Population", y = "Aggregate Allele Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
# Plot 2: Location names x Prevalence
plot2 <- ggplot(prev_DF) +
geom_bar(aes(x = reorder(location_name, super_population), y = avg_val, fill = super_population), stat = "identity") +
labs(title = paste("Prevalence of", current_disease_name), x = "Location", y = "Prevalence") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)
}
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs$Asthma, mean_freq_list = mean_frequency_DF_list)
graph_prevalence_vs_meanFreq_bar <- function(prev_DF, mean_freq_list){
# pass single prev_df in and the whole mean_freq_list
current_disease_name <- unique(prev_DF$cause_name)
# get list of pops
pop_abbrevs <- prev_DF$abbrevs
# get frequency means for respective pops
aggregate_allele_freqs <- numeric()
for(list in pop_abbrevs){
if(length(list) == 1){
mean_freq <- mean_freq_list[[current_disease_name]][list,] # grabbing value by row name ref
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
else{ # dealing with cases where multiple populations map onto a given diseases location category
temp_mean <- numeric()
for(label in list){
mean_freq <- mean_freq_list[[current_disease_name]][label,]
temp_mean <- append(temp_mean, mean_freq)
}
mean_freq <- mean(temp_mean)
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
}
#generate label vector for populations, (combining multiple populations where necessary)
allele_freq_labels <- sapply(pop_abbrevs, function(labs){
if(length(labs) == 1){ return(labs)}
else{return(paste(labs, collapse = "|"))}
})
# generate super pop DF
super_pops <- bind_super_pops(pop_abbrevs, superPops)
super_pops <- cbind(super_pops, allele_freq_labels, aggregate_allele_freqs)
#super_pops <- super_pops[order(super_pops$super_population), ] # reorder for graphing
#print(super_pops)
prev_DF['super_population'] <- super_pops$super_population # adding super population column to be used for ordering of graphed samples
#prev_DF <- prev_DF[order(prev_DF$super_population), ] # reorder for graphing
# Generate and save two plots
# 1. allele_freq_labels x aggregate_allele_freqs
# 2. prev_DF$location_name x prev_DF$avg_val
# Set up side-by-side layout
#par(mfrow = c(1, 2))
# Plot 1: Allele frequency labels x Aggregate allele frequencies
plot1 <- ggplot(super_pops) +
geom_bar(aes(x = reorder(allele_freq_labels, super_population), y = aggregate_allele_freqs,
fill = super_population), stat = "identity") +
labs(title = paste("Mean Allele Frequency of", current_disease_name), x = "Population", y = "Aggregate Allele Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
# Plot 2: Location names x Prevalence
plot2 <- ggplot(prev_DF) +
geom_bar(aes(x = reorder(location_name, super_population), y = avg_val, fill = super_population), stat = "identity") +
labs(title = paste("Prevalence of", current_disease_name), x = "Location", y = "Prevalence") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)
}
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs$Asthma, mean_freq_list = mean_frequency_DF_list)
esquisse:::esquisser()
debug(graph_prevalence_vs_meanFreq_bar)
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs$Asthma, mean_freq_list = mean_frequency_DF_list)
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs$Asthma, mean_freq_list = mean_frequency_DF_list)
View(super_pops)
View(prev_DF)
cor(prev_DF$avg_val, aggregate_allele_freqs)
graph_prevalence_vs_meanFreq_bar <- function(prev_DF, mean_freq_list){
# pass single prev_df in and the whole mean_freq_list
current_disease_name <- unique(prev_DF$cause_name)
# get list of pops
pop_abbrevs <- prev_DF$abbrevs
# get frequency means for respective pops
aggregate_allele_freqs <- numeric()
for(list in pop_abbrevs){
if(length(list) == 1){
mean_freq <- mean_freq_list[[current_disease_name]][list,] # grabbing value by row name ref
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
else{ # dealing with cases where multiple populations map onto a given diseases location category
temp_mean <- numeric()
for(label in list){
mean_freq <- mean_freq_list[[current_disease_name]][label,]
temp_mean <- append(temp_mean, mean_freq)
}
mean_freq <- mean(temp_mean)
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
}
#generate label vector for populations, (combining multiple populations where necessary)
allele_freq_labels <- sapply(pop_abbrevs, function(labs){
if(length(labs) == 1){ return(labs)}
else{return(paste(labs, collapse = "|"))}
})
# generate super pop DF
super_pops <- bind_super_pops(pop_abbrevs, superPops)
super_pops <- cbind(super_pops, allele_freq_labels, aggregate_allele_freqs)
#super_pops <- super_pops[order(super_pops$super_population), ] # reorder for graphing
#print(super_pops)
prev_DF['super_population'] <- super_pops$super_population # adding super population column to be used for ordering of graphed samples
#prev_DF <- prev_DF[order(prev_DF$super_population), ] # reorder for graphing
# Generate and save two plots
# 1. allele_freq_labels x aggregate_allele_freqs
# 2. prev_DF$location_name x prev_DF$avg_val
# Plot 1: Allele frequency labels x Aggregate allele frequencies
plot1 <- ggplot(super_pops) +
geom_bar(aes(x = allele_freq_labels, y = aggregate_allele_freqs,
fill = super_population), stat = "identity") +
labs(title = paste("Mean Allele Frequency of", current_disease_name), x = "Population", y = "Aggregate Allele Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
plot1Name <- paste("meanAlleleFreq_", current_disease_name)
ggsave(plot1Name, scale = 2.5)
# Plot 2: Location names x Prevalence
plot2 <- ggplot(prev_DF) +
geom_bar(aes(x = location_name, y = avg_val, fill = super_population), stat = "identity") +
labs(title = paste("Prevalence of", current_disease_name), x = "Location", y = "Prevalence") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)
plot2Name <- paste("prevalence_", current_disease_name)
ggsave(plot2Name, scale = 2.5)
return(cor(prev_DF$avg_val, aggregate_allele_freqs)) # returning correlation coefficient for numeric interpretation.
}
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs$Asthma, mean_freq_list = mean_frequency_DF_list)
getwd()
graph_prevalence_vs_meanFreq_bar <- function(prev_DF, mean_freq_list){
# pass single prev_df in and the whole mean_freq_list
current_disease_name <- unique(prev_DF$cause_name)
# get list of pops
pop_abbrevs <- prev_DF$abbrevs
# get frequency means for respective pops
aggregate_allele_freqs <- numeric()
for(list in pop_abbrevs){
if(length(list) == 1){
mean_freq <- mean_freq_list[[current_disease_name]][list,] # grabbing value by row name ref
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
else{ # dealing with cases where multiple populations map onto a given diseases location category
temp_mean <- numeric()
for(label in list){
mean_freq <- mean_freq_list[[current_disease_name]][label,]
temp_mean <- append(temp_mean, mean_freq)
}
mean_freq <- mean(temp_mean)
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
}
#generate label vector for populations, (combining multiple populations where necessary)
allele_freq_labels <- sapply(pop_abbrevs, function(labs){
if(length(labs) == 1){ return(labs)}
else{return(paste(labs, collapse = "|"))}
})
# generate super pop DF
super_pops <- bind_super_pops(pop_abbrevs, superPops)
super_pops <- cbind(super_pops, allele_freq_labels, aggregate_allele_freqs)
#super_pops <- super_pops[order(super_pops$super_population), ] # reorder for graphing
#print(super_pops)
prev_DF['super_population'] <- super_pops$super_population # adding super population column to be used for ordering of graphed samples
#prev_DF <- prev_DF[order(prev_DF$super_population), ] # reorder for graphing
# Generate and save two plots
# 1. allele_freq_labels x aggregate_allele_freqs
# 2. prev_DF$location_name x prev_DF$avg_val
# Plot 1: Allele frequency labels x Aggregate allele frequencies
plot1 <- ggplot(super_pops) +
geom_bar(aes(x = allele_freq_labels, y = aggregate_allele_freqs,
fill = super_population), stat = "identity") +
labs(title = paste("Mean Allele Frequency of", current_disease_name), x = "Population", y = "Aggregate Allele Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
plot1Name <- paste("meanAlleleFreq_", current_disease_name)
ggsave(plot1Name, scale = 2.5, device = "png", bg = "white")
# Plot 2: Location names x Prevalence
plot2 <- ggplot(prev_DF) +
geom_bar(aes(x = location_name, y = avg_val, fill = super_population), stat = "identity") +
labs(title = paste("Prevalence of", current_disease_name), x = "Location", y = "Prevalence") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)
plot2Name <- paste("prevalence_", current_disease_name)
ggsave(plot2Name, scale = 2.5, device = "png", bg = "white")
return(cor(prev_DF$avg_val, aggregate_allele_freqs)) # returning correlation coefficient for numeric interpretation.
}
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs$Asthma, mean_freq_list = mean_frequency_DF_list)
graph_prevalence_vs_meanFreq_bar <- function(prev_DF, mean_freq_list){
# pass single prev_df in and the whole mean_freq_list
current_disease_name <- unique(prev_DF$cause_name)
# get list of pops
pop_abbrevs <- prev_DF$abbrevs
# get frequency means for respective pops
aggregate_allele_freqs <- numeric()
for(list in pop_abbrevs){
if(length(list) == 1){
mean_freq <- mean_freq_list[[current_disease_name]][list,] # grabbing value by row name ref
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
else{ # dealing with cases where multiple populations map onto a given diseases location category
temp_mean <- numeric()
for(label in list){
mean_freq <- mean_freq_list[[current_disease_name]][label,]
temp_mean <- append(temp_mean, mean_freq)
}
mean_freq <- mean(temp_mean)
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
}
#generate label vector for populations, (combining multiple populations where necessary)
allele_freq_labels <- sapply(pop_abbrevs, function(labs){
if(length(labs) == 1){ return(labs)}
else{return(paste(labs, collapse = "|"))}
})
# generate super pop DF
super_pops <- bind_super_pops(pop_abbrevs, superPops)
super_pops <- cbind(super_pops, allele_freq_labels, aggregate_allele_freqs)
#super_pops <- super_pops[order(super_pops$super_population), ] # reorder for graphing
#print(super_pops)
prev_DF['super_population'] <- super_pops$super_population # adding super population column to be used for ordering of graphed samples
#prev_DF <- prev_DF[order(prev_DF$super_population), ] # reorder for graphing
# Generate and save two plots
# 1. allele_freq_labels x aggregate_allele_freqs
# 2. prev_DF$location_name x prev_DF$avg_val
# Plot 1: Allele frequency labels x Aggregate allele frequencies
plot1 <- ggplot(super_pops) +
geom_bar(aes(x = allele_freq_labels, y = aggregate_allele_freqs,
fill = super_population), stat = "identity") +
labs(title = paste("Mean Allele Frequency of", current_disease_name), x = "Population", y = "Aggregate Allele Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
plot1Name <- paste("meanAlleleFreq_", current_disease_name, ".png")
ggsave(plot1Name, scale = 2.5, device = "png", bg = "white")
# Plot 2: Location names x Prevalence
plot2 <- ggplot(prev_DF) +
geom_bar(aes(x = location_name, y = avg_val, fill = super_population), stat = "identity") +
labs(title = paste("Prevalence of", current_disease_name), x = "Location", y = "Prevalence") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)
plot2Name <- paste("prevalence_", current_disease_name, ".png")
ggsave(plot2Name, scale = 2.5, device = "png", bg = "white")
return(cor(prev_DF$avg_val, aggregate_allele_freqs)) # returning correlation coefficient for numeric interpretation.
}
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs$Asthma, mean_freq_list = mean_frequency_DF_list)
graph_prevalence_vs_meanFreq_bar <- function(prev_DF, mean_freq_list){
# pass single prev_df in and the whole mean_freq_list
current_disease_name <- unique(prev_DF$cause_name)
# get list of pops
pop_abbrevs <- prev_DF$abbrevs
# get frequency means for respective pops
aggregate_allele_freqs <- numeric()
for(list in pop_abbrevs){
if(length(list) == 1){
mean_freq <- mean_freq_list[[current_disease_name]][list,] # grabbing value by row name ref
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
else{ # dealing with cases where multiple populations map onto a given diseases location category
temp_mean <- numeric()
for(label in list){
mean_freq <- mean_freq_list[[current_disease_name]][label,]
temp_mean <- append(temp_mean, mean_freq)
}
mean_freq <- mean(temp_mean)
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
}
#generate label vector for populations, (combining multiple populations where necessary)
allele_freq_labels <- sapply(pop_abbrevs, function(labs){
if(length(labs) == 1){ return(labs)}
else{return(paste(labs, collapse = "|"))}
})
# generate super pop DF
super_pops <- bind_super_pops(pop_abbrevs, superPops)
super_pops <- cbind(super_pops, allele_freq_labels, aggregate_allele_freqs)
#super_pops <- super_pops[order(super_pops$super_population), ] # reorder for graphing
#print(super_pops)
prev_DF['super_population'] <- super_pops$super_population # adding super population column to be used for ordering of graphed samples
#prev_DF <- prev_DF[order(prev_DF$super_population), ] # reorder for graphing
# Generate and save two plots
# 1. allele_freq_labels x aggregate_allele_freqs
# 2. prev_DF$location_name x prev_DF$avg_val
# Plot 1: Allele frequency labels x Aggregate allele frequencies
plot1 <- ggplot(super_pops) +
geom_bar(aes(x = allele_freq_labels, y = aggregate_allele_freqs,
fill = super_population), stat = "identity") +
labs(title = paste("Mean Allele Frequency of", current_disease_name), x = "Population", y = "Aggregate Allele Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
plot1Name <- paste("meanAlleleFreq_", current_disease_name, ".png")
ggsave(plot1Name, scale = 2, device = "png", bg = "white")
# Plot 2: Location names x Prevalence
plot2 <- ggplot(prev_DF) +
geom_bar(aes(x = location_name, y = avg_val, fill = super_population), stat = "identity") +
labs(title = paste("Prevalence of", current_disease_name), x = "Location", y = "Prevalence") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)
plot2Name <- paste("prevalence_", current_disease_name, ".png")
ggsave(plot2Name, scale = 1.5, device = "png", bg = "white")
return(cor(prev_DF$avg_val, aggregate_allele_freqs)) # returning correlation coefficient for numeric interpretation.
}
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs$Asthma, mean_freq_list = mean_frequency_DF_list)
graph_prevalence_vs_meanFreq_bar <- function(prev_DF, mean_freq_list){
# pass single prev_df in and the whole mean_freq_list
current_disease_name <- unique(prev_DF$cause_name)
# get list of pops
pop_abbrevs <- prev_DF$abbrevs
# get frequency means for respective pops
aggregate_allele_freqs <- numeric()
for(list in pop_abbrevs){
if(length(list) == 1){
mean_freq <- mean_freq_list[[current_disease_name]][list,] # grabbing value by row name ref
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
else{ # dealing with cases where multiple populations map onto a given diseases location category
temp_mean <- numeric()
for(label in list){
mean_freq <- mean_freq_list[[current_disease_name]][label,]
temp_mean <- append(temp_mean, mean_freq)
}
mean_freq <- mean(temp_mean)
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
}
#generate label vector for populations, (combining multiple populations where necessary)
allele_freq_labels <- sapply(pop_abbrevs, function(labs){
if(length(labs) == 1){ return(labs)}
else{return(paste(labs, collapse = "|"))}
})
# generate super pop DF
super_pops <- bind_super_pops(pop_abbrevs, superPops)
super_pops <- cbind(super_pops, allele_freq_labels, aggregate_allele_freqs)
#super_pops <- super_pops[order(super_pops$super_population), ] # reorder for graphing
#print(super_pops)
prev_DF['super_population'] <- super_pops$super_population # adding super population column to be used for ordering of graphed samples
#prev_DF <- prev_DF[order(prev_DF$super_population), ] # reorder for graphing
# Generate and save two plots
# 1. allele_freq_labels x aggregate_allele_freqs
# 2. prev_DF$location_name x prev_DF$avg_val
# Plot 1: Allele frequency labels x Aggregate allele frequencies
plot1 <- ggplot(super_pops) +
geom_bar(aes(x = allele_freq_labels, y = aggregate_allele_freqs,
fill = super_population), stat = "identity") +
labs(title = paste("Mean Allele Frequency of", current_disease_name), x = "Population (1000Genomes)", y = "Aggregate Allele Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
plot1Name <- paste("meanAlleleFreq_", current_disease_name, ".png")
ggsave(plot1Name, scale = 1.75, device = "png", bg = "white")
# Plot 2: Location names x Prevalence
plot2 <- ggplot(prev_DF) +
geom_bar(aes(x = location_name, y = avg_val, fill = super_population), stat = "identity") +
labs(title = paste("Prevalence of", current_disease_name), x = "Location of Sample Collection", y = "Prevalence") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)
plot2Name <- paste("prevalence_", current_disease_name, ".png")
ggsave(plot2Name, scale = 1.75, device = "png", bg = "white")
return(cor(prev_DF$avg_val, aggregate_allele_freqs)) # returning correlation coefficient for numeric interpretation.
}
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs$Asthma, mean_freq_list = mean_frequency_DF_list)
setwd("./GeneralPlots/final_report_plots/")
correlation_coefficients <- sapply(prev_DFs, function(x){graph_prevalence_vs_meanFreq_bar(prev_DF = x, mean_frequency_DF_list)})
mod_prev_DFs <- prev_DFs[!(names(prev_DFs) %in% "Colon and rectum cancer")]
correlation_coefficients <- sapply(mod_prev_DFs, function(x){graph_prevalence_vs_meanFreq_bar(prev_DF = x, mean_frequency_DF_list)})
View(mod_prev_DFs)
mod_prev_DFs <- prev_DFs[!(names(prev_DFs) %in% c("Colon and rectum cancer", "Cystic Fibrosis"))]
correlation_coefficients <- sapply(mod_prev_DFs, function(x){graph_prevalence_vs_meanFreq_bar(prev_DF = x, mean_frequency_DF_list)})
debug(graph_prevalence_vs_meanFreq_bar)
graph_prevalence_vs_meanFreq_bar(prev_DFs$`Colon and rectum cancer`, mean_frequency_DF_list)
graph_prevalence_vs_meanFreq_bar(prev_DFs$`Colon and rectum cancer`, mean_frequency_DF_list)
View(mean_freq_list)
names(mean_frequency_DF_list)
names(mean_frequency_DF_list) <- c("Asthma", "Breast cancer", "Colorectal cancer", "Hypertension", "Inflammatory bowel disease", "Multiple sclerosis", "Prostate cancer", "Psoriasis", "Schizophrenia", "Type 2 diabetes","Phenylketonuria", "Cystic Fibrosis")
names(prev_DFs)
names(prev_DFs) <- c("Asthma", "Breast cancer", "Colorectal cancer", "Cystic Fibrosis", "Type 2 diabetes", "Hypertension", "Inflammatory bowel disease", "Multiple sclerosis", "Phenylketonuria", "Prostate cancer", "Psoriasis", "Schizophrenia")
correlation_coefficients <- sapply(prev_DFs, function(x){graph_prevalence_vs_meanFreq_bar(prev_DF = x, mean_frequency_DF_list)})
undebug(graph_prevalence_vs_meanFreq_bar)
correlation_coefficients <- sapply(prev_DFs, function(x){graph_prevalence_vs_meanFreq_bar(prev_DF = x, mean_frequency_DF_list)})
debug(graph_prevalence_vs_meanFreq_bar)
graph_prevalence_vs_meanFreq_bar(prev_DFs$`Colorectal cancer`, mean_frequency_DF_list)
graph_prevalence_vs_meanFreq_bar(prev_DFs$`Colorectal cancer`, mean_frequency_DF_list)
View(prev_DF)
View(mean_freq_list)
graph_prevalence_vs_meanFreq_bar(prev_DFs$`Colorectal cancer`, mean_frequency_DF_list)
force(prev_DF)
View(prev_DF)
graph_prevalence_vs_meanFreq_bar <- function(prev_DF, mean_freq_list, cur_disease_name = ""){
# pass single prev_df in and the whole mean_freq_list
current_disease_name <- cur_disease_name #unique(prev_DF$cause_name)
# get list of pops
pop_abbrevs <- prev_DF$abbrevs
# get frequency means for respective pops
aggregate_allele_freqs <- numeric()
for(list in pop_abbrevs){
if(length(list) == 1){
mean_freq <- mean_freq_list[[current_disease_name]][list,] # grabbing value by row name ref
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
else{ # dealing with cases where multiple populations map onto a given diseases location category
temp_mean <- numeric()
for(label in list){
mean_freq <- mean_freq_list[[current_disease_name]][label,]
temp_mean <- append(temp_mean, mean_freq)
}
mean_freq <- mean(temp_mean)
aggregate_allele_freqs <- append(aggregate_allele_freqs, mean_freq)
}
}
#generate label vector for populations, (combining multiple populations where necessary)
allele_freq_labels <- sapply(pop_abbrevs, function(labs){
if(length(labs) == 1){ return(labs)}
else{return(paste(labs, collapse = "|"))}
})
# generate super pop DF
super_pops <- bind_super_pops(pop_abbrevs, superPops)
super_pops <- cbind(super_pops, allele_freq_labels, aggregate_allele_freqs)
#super_pops <- super_pops[order(super_pops$super_population), ] # reorder for graphing
#print(super_pops)
prev_DF['super_population'] <- super_pops$super_population # adding super population column to be used for ordering of graphed samples
#prev_DF <- prev_DF[order(prev_DF$super_population), ] # reorder for graphing
# Generate and save two plots
# 1. allele_freq_labels x aggregate_allele_freqs
# 2. prev_DF$location_name x prev_DF$avg_val
# Plot 1: Allele frequency labels x Aggregate allele frequencies
plot1 <- ggplot(super_pops) +
geom_bar(aes(x = allele_freq_labels, y = aggregate_allele_freqs,
fill = super_population), stat = "identity") +
labs(title = paste("Mean Allele Frequency of", current_disease_name), x = "Population (1000Genomes)", y = "Aggregate Allele Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
plot1Name <- paste("meanAlleleFreq_", current_disease_name, ".png")
ggsave(plot1Name, scale = 1.75, device = "png", bg = "white")
# Plot 2: Location names x Prevalence
plot2 <- ggplot(prev_DF) +
geom_bar(aes(x = location_name, y = avg_val, fill = super_population), stat = "identity") +
labs(title = paste("Prevalence of", current_disease_name), x = "Location of Sample Collection", y = "Prevalence") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)
plot2Name <- paste("prevalence_", current_disease_name, ".png")
ggsave(plot2Name, scale = 1.75, device = "png", bg = "white")
return(cor(prev_DF$avg_val, aggregate_allele_freqs)) # returning correlation coefficient for numeric interpretation.
}
undebug(graph_prevalence_vs_meanFreq_bar)
names(prev_DFs)[1]
correlation_coefficients <- sapply(1:length(prev_DFs), function(i){
graph_prevalence_vs_meanFreq_bar(prev_DF = prev_DFs[[i]], mean_frequency_DF_list, cur_disease_name = names(prev_DFs)[i])})
correlation_coefficients_DF <- data.frame(correlation_coefficients, disease = names(prev_DFs))
View(correlation_coefficients_DF)
?drop
correlation_coefficients_DF <- correlation_coefficients_DF[, c(2,1)]
View(correlation_coefficients_DF)
correlation_coefficients_DF <- correlation_coefficients_DF[-c(11,12), ]
write.csv(correlation_coefficients_DF, file = "diseasePrevalence_vs_meanSNP_frequency.csv")
?write.csv
write.csv(correlation_coefficients_DF, file = "diseasePrevalence_vs_meanSNP_frequency.csv", row.names = F)
version()
version
packages_all <- installed.packages()
View(packages_all)
packages_i_know <- c("curl", "data.table", "dplyr", "ggplot2", "esquisse", "jsonlite", "purrr", "tidyr", "ggrepel", "httr", "knitr", "tibble")
package_versions <- data.frame(package = package_all[,"Package"], Version = packages_all[,"Version"])
package_versions <- data.frame(package = packages_all[,"Package"], Version = packages_all[,"Version"])
package_version <- package_version[rownames(package_version) %in% packages_i_know, ]
package_version <- package_version[names(package_version$package) %in% packages_i_know, ]
View(package_version())
View(package_version
package_versions <- package_versions[names(package_versions$package) %in% packages_i_know, ]
View(package_versions)
package_versions <- data.frame(package = packages_all[,"Package"], Version = packages_all[,"Version"])
package_versions <- package_versions[names(package_versions$package) %in% packages_i_know, ]
package_versions <- data.frame(package = packages_all[,"Package"], Version = packages_all[,"Version"])
names(package_versions$package) %in% packages_i_know
package_versions$package %in% packages_i_know
package_versions <- package_versions[package_versions$package %in% packages_i_know, ]
package_versions
---
title: "Supplementary Materials"
### Version:
platform       x86_64-w64-mingw32
?unique
523+826
View(asso)
unique_variant_ids
View(fstPopAbove.4_perVar)
?prcomp
View(fstPopAbove.4_perVar)
unique(t10_mono_with_fst$VariantID)
length(unique(t10_mono_with_fst$VariantID))
length(unique(t20_disease_with_fst$VariantID))
getwd()
View(t20_disease_with_fst)
library(knitr)
?kable
class(t10_mono_with_fst)
class(mtcars)
save(t10_mono_with_fst, file = "./workingData/top10_monogenic_vars_perPop_with_fst.rds")
save(t20_disease_with_fst, file = "./workingData/top20_disease_vars_perPop_with_fst.rds")
save(monogenic_variants_complete, file = "./workingData/monogenic_variants_complete.rds")
unique(monogenic_variants_complete$monogenic_searched_resource)
pops
36000/160000
477/160000
View(correlation_coefficients_DF)
save(correlation_coefficients_DF, file = "./workingData/correlation_coefficients_DF.rds")
